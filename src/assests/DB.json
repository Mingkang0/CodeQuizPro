{
  "resource": {
    "Python": {
      "topics": {
        "1": {
          "title": "Introduction to Python",
          "overview": "Introduction to Python covers the basics of the Python programming language. Learn about Python's history, syntax, and how to write your first Python program. Explore Python's philosophy and its role in various application domains.",
          "duration": "5 minutes",
          "content": "Python is a popular programming language. It was created by Guido van Rossum, and released in 1991. It is used for web development (server-side), software development, mathematics and so on. What can Python do? First, Python can be used on a server to create web applications. Second, Python can be used alongside software to create workflows. Third, Python can connect to database systems. It can also read and modify files. Fourth, Python can be used to handle big data and perform complex mathematics. Fifth, Python can be used for rapid prototyping, or for production-ready software development. What are the benefits of using Python? First, Python is easy to learn. Second, Python is free and open-source. Third, Python has a broad community. Fourth, Python has many libraries available. Fifth, Python is versatile. Python is a great language for beginners. It is powerful enough for companies like Google, Facebook, and Spotify. Python is used in many fields, such as: data science, machine learning, and web development."
        },
        "2": {
          "title": "Variables and Data Types",
          "overview": "Variables and Data Types topic explains how to work with variables, data types, and basic data structures in Python. Explore Python's dynamic typing system, and learn how to declare variables, assign values, and work with numeric, string, and boolean data types.",
          "duration": "15 minutes",
          "content": "Variables are containers for storing data values.In Python, variables are created when you assign a value to it. For example, x = 5 or y = \"Hello, World\". Variables do not need to be declared with any particular type, and can even change type after they have been set.",
          "code": [
            "x = 5",
            "y = \"Hello, World!\"",
            "print(x)",
            "print(y)"
          ]
        },
        "3": {
          "title": "Control Structures",
          "overview": "Control Structures topic dives into Python's control flow statements. Learn how to use if statements, loops, and conditional expressions to control the execution of your programs. Understand how to make decisions and create loops for repetitive tasks.",
          "duration": "20 minutes",
          "content": "Control structures are essential for directing the flow of your Python programs. In the Control Structures topic, we'll explore decision-making with if statements, allowing your programs to take different paths based on conditions. We'll also cover loops, including for loops and while loops, to perform repetitive tasks efficiently. Conditional expressions provide a concise way to make decisions within expressions. By mastering control structures, you'll have the power to create programs that respond dynamically to different situations."
        },
        "4": {
          "title": "Functions",
          "overview": "Functions topic covers the creation and usage of functions in Python. Explore how to define functions, pass arguments, and return values. Learn about function scopes, lambda functions, and common function design patterns.",
          "duration": "15 minutes",
          "content": "Functions are a fundamental concept in programming, allowing you to break down complex tasks into manageable pieces. In the Functions topic, you'll learn how to define and use functions in Python. We'll cover function arguments, return values, and function scopes. You'll also discover lambda functions, which are concise anonymous functions. Understanding functions is crucial for writing modular and maintainable code. By the end of this topic, you'll be able to create your own functions and leverage them in your Python programs."
        },
        "5": {
          "title": "Lists and Tuples",
          "overview": "Lists and Tuples topic introduces Python's sequences. Learn how to work with lists, tuples, and ranges. Discover common list operations, including slicing, concatenation, and iteration. Understand the differences between lists and tuples.",
          "duration": "10 minutes",
          "content": "Sequences are essential data structures in Python, and the Lists and Tuples topic explores these concepts in depth. You'll learn how to create and manipulate lists, which are ordered collections of items. Tuples, on the other hand, are similar to lists but immutable. We'll cover common list operations like slicing, concatenation, and iteration. Additionally, you'll discover the power of list comprehensions for concise data processing. Understanding sequences is crucial for working with data and performing various operations in Python."
        },
        "6": {
          "title": "Dictionaries",
          "overview": "Dictionaries topic explores Python's dictionary data type. Learn how to create dictionaries, add and retrieve key-value pairs, and perform dictionary operations. Understand the use of dictionaries in data processing and mapping.",
          "duration": "10 minutes",
          "content": "Dictionaries are versatile data structures used to store key-value pairs, and the Dictionaries topic will teach you how to master them. You'll learn how to create dictionaries, add, retrieve, and update key-value pairs. We'll cover dictionary methods and operations like merging dictionaries and iterating through keys and values. Dictionaries are valuable for tasks such as data processing, configuration settings, and mapping relationships. By the end of this topic, you'll be proficient in using dictionaries in your Python projects."
        },
        "7": {
          "title": "File Handling",
          "overview": "File Handling topic covers how to work with files in Python. Learn how to open, read, write, and close files. Explore different file modes, error handling, and best practices for file I/O operations.",
          "duration": "15 minutes",
          "content": "File handling is a fundamental aspect of programming, and the File Handling topic will equip you with the skills to work with files in Python. You'll learn how to open, read, write, and close files using Python's built-in functions and context managers. We'll explore different file modes and understand how to handle exceptions during file operations. File handling is essential for tasks like data input and output, log file processing, and more. By the end of this topic, you'll be proficient in handling files in Python."
        },
        "8": {
          "title": "Modules and Packages",
          "overview": "Modules and Packages topic explains how to organize and reuse code in Python. Learn about modules, import statements, and creating your own modules. Explore the concept of packages and how to structure larger Python projects.",
          "duration": "10 minutes",
          "content": "In the Modules and Packages topic, we'll delve into the world of code organization and reuse. You'll learn how to create and use modules, which are Python files containing reusable code. We'll explore different ways to import modules into your programs and discuss best practices for organizing your code. Additionally, you'll discover packages, which are collections of modules, and understand how to structure larger Python projects using packages. This topic is essential for writing maintainable and scalable Python code."
        },
        "9": {
          "title": "Object-Oriented Programming",
          "overview": "Object-Oriented Programming (OOP) topic introduces OOP concepts in Python. Learn how to create classes, objects, and define methods. Explore encapsulation, inheritance, polymorphism, and design principles in Python.",
          "duration": "15 minutes",
          "content": "Object-Oriented Programming (OOP) is a powerful paradigm, and the OOP topic will teach you how to apply it in Python. You'll learn about classes and objects, the building blocks of OOP. Explore concepts like encapsulation, inheritance, and polymorphism, which enable you to create reusable and maintainable code. We'll also discuss design principles and best practices for designing object-oriented systems in Python. By the end of this topic, you'll have a solid understanding of OOP in Python."
        },
        "10": {
          "title": "Error Handling",
          "overview": "Error Handling topic covers how to handle exceptions and errors in Python. Learn about try-except blocks, raising exceptions, and handling different types of exceptions. Discover best practices for writing robust and error-tolerant code.",
          "duration": "15 minutes",
          "content": "Errors and exceptions are an integral part of software development, and the Error Handling topic will guide you in handling them effectively. You'll learn about try-except blocks, which allow you to gracefully handle exceptions in your code. Explore raising custom exceptions to handle specific errors. We'll cover various types of exceptions and their common use cases. Error handling is crucial for writing robust and reliable Python applications. By the end of this topic, you'll be skilled in managing errors in Python."
        }
      },
      "video": {
        "url": "https://www.youtube.com/embed/_uQrJ0TkZlc?si=8pX5mp2zLauvyB2i"
      }
    }
  },
  "quiz": {
    "Beginner": {
      "Python": {
        "questions": [
          {
            "question": "What is Python?",
            "options": [
              "A reptile",
              "A programming language",
              "A type of snake",
              "An operating system"
            ],
            "answer": "A programming language"
          },
          {
            "question": "Which of the following statements is true about Python?",
            "options": [
              "Python is a compiled language",
              "Python is dynamically typed",
              "Python is primarily used for game development",
              "Python is not open-source"
            ],
            "answer": "Python is dynamically typed"
          },
          {
            "question": "What is the output of the following code?\n\nprint(2 + 2)",
            "options": ["4", "22", "\"2 + 2\"", "None"],
            "answer": "4"
          },
          {
            "question": "How do you declare a variable in Python?",
            "options": [
              "Using the var keyword",
              "Using the let keyword",
              "Using the const keyword",
              "Variables are declared automatically"
            ],
            "answer": "Variables are declared automatically"
          },
          {
            "question": "What is the correct way to comment out a single line in Python?",
            "options": [
              "// This is a comment",
              "/* This is a comment */",
              "# This is a comment",
              "<!-- This is a comment -->"
            ],
            "answer": "# This is a comment"
          },
          {
            "question": "Which of the following data types is mutable in Python?",
            "options": ["int", "str", "list", "tuple"],
            "answer": "list"
          },
          {
            "question": "What is the result of 3 ** 2 in Python?",
            "options": ["6", "9", "12", "32"],
            "answer": "9"
          },
          {
            "question": "How do you define a function in Python?",
            "options": [
              "function myFunction():",
              "def myFunction():",
              "method myFunction():",
              "func myFunction():"
            ],
            "answer": "def myFunction():"
          },
          {
            "question": "What does the len() function return in Python?",
            "options": [
              "The length of a list or string",
              "The largest integer less than or equal to a number",
              "The smallest integer greater than or equal to a number",
              "The logarithm of a number"
            ],
            "answer": "The length of a list or string"
          },
          {
            "question": "How do you open a file named \"example.txt\" for reading in Python?",
            "options": [
              "file = open(\"example.txt\", \"w\")",
              "file = open(\"example.txt\", \"r\")",
              "file = open(\"example.txt\", \"a\")",
              "file = open(\"example.txt\", \"x\")"
            ],
            "answer": "file = open(\"example.txt\", \"r\")"
          },
          {
            "question": "What will be the value of the following Python expression?",
            "code": ["4 + 3 % 5"],
            "options": ["7", "2", "4", "1"],
            "answer": "7",
            "explanation": "The order of precedence is: %, +. Hence the expression above, on simplification results in 4 + 3 = 7. Hence the result is 7."
          },
          {
            "question": "What will be the output of the following Python code?",
            "code": [
              "i = 1",
              "while True:",
              "    if i % 3 == 0:",
              "        break",
              "    print(i)",
              "    i += 1"
            ],
            "options": ["1 2 3", "error", "1 2", "none of the mentioned"],
            "answer": "error",
            "explanation": "SyntaxError, there shouldn’t be a space between + and = in +=."
          },
          {
            "question": "What is the order of precedence in python?",
            "options": [
              "Exponential, Parentheses, Multiplication, Division, Addition, Subtraction",
              "Exponential, Parentheses, Division, Multiplication, Addition, Subtraction",
              "Parentheses, Exponential, Multiplication, Division, Subtraction, Addition",
              "Parentheses, Exponential, Multiplication, Division, Addition, Subtraction"
            ],
            "answer": "Parentheses, Exponential, Multiplication, Division, Addition, Subtraction",
            "explanation": "For order of precedence, just remember this PEMDAS (similar to BODMAS)."
          },
          {
            "question": "What are the values of the following Python expressions?",
            "expressions": ["2**(3**2)", "(2**3)**2", "2**3**2"],
            "options": [
              "512, 64, 512",
              "512, 512, 512",
              "64, 512, 64",
              "64, 64, 64"
            ],
            "answer": "512, 64, 512",
            "explanation": "Expression 1 is evaluated as: 2**9, which is equal to 512. Expression 2 is evaluated as 8**2, which is equal to 64. The last expression is evaluated as 2**(3**2). This is because the associativity of ** operator is from right to left. Hence the result of the third expression is 512."
          },
          {
            "question": "Which of the following functions is a built-in function in python?",
            "options": ["factorial()", "print()", "seed()", "sqrt()"],
            "answer": "print()",
            "explanation": "The function seed is a function which is present in the random module. The functions sqrt and factorial are a part of the math module. The print function is a built-in function which prints a value directly to the system output."
          }
        ]
      },
      "JavaScript": {
        "questions": [
          {
            "question": "Which type of JavaScript language is _____ ?",
            "options": [
              "Object-Oriented",
              "Object-Based",
              "Assembly-language",
              "High-level"
            ],
            "answer": "Object-Based",
            "explanation": "JavaScript is not a pure OOP's (object oriented programming) based languages such as PHP, java or many other languages, although it is an object-based language. It is not OOP's based language, because it doesn't have three basic properties of object-oriented programming languages, such as polymorphism, encapsulation, and inheritance."
          },
          {
            "question": "What is the actual output?",
            "code": [
              "var x = 5, y = 1",
              "var obj = { x: 10 }",
              "with(obj)",
              "{",
              "alert(y)",
              "}"
            ],
            "options": ["1", "error", "10", "5"],
            "answer": "1",
            "explanation": "The output of the above snippet code will be 1 because, first of all, the interpreter will search 'obj' for the property 'y.' But it fails to find 'obj' for property 'y,' so it chooses a value from outside the object, which is available within the given code."
          },
          {
            "question": "The \"function\" and \"var\" are known as:",
            "options": [
              "Keywords",
              "Data types",
              "Declaration statements",
              "Prototypes"
            ],
            "answer": "Declaration statements",
            "explanation": "The \"function\" and \"var\" both are Declaration statements. These both are used for defining and declaring variables and functions anywhere in the program."
          },
          {
            "question": "Which of the following is the correct output for the following JavaScript code:",
            "code": [
              "var x = 8;",
              "if (x > 9) {",
              "  document.write(9);",
              "} else {",
              "  document.write(x);",
              "}"
            ],
            "options": ["9", "0", "8", "Undefined"],
            "answer": "8",
            "explanation": "The code initializes a variable `x` with the value 8. Then, it checks if `x` is greater than 9, which is not true (`x` is 8), so it goes to the `else` block and writes the value of `x` which is 8."
          },
          {
            "question": "Which of the following is the correct output for the following JavaScript code:",
            "code": [
              "var x=3;",
              "var y=2;",
              "var z=0;",
              "If(x==y)",
              "  document.write(x);",
              "elseif(x==y)",
              "  document.write(x);",
              "else",
              "  document.write(z);"
            ],
            "options": ["3", "0", "Error", "2"],
            "answer": "0",
            "explanation": "In the given code, x is compared to y in an if statement. Since x is not equal to y, it proceeds to the else block and writes the value of z (which is 0) to the document. Therefore, the correct output is 0."
          },
          {
            "question": "Which of the following variables takes precedence over the others if the names are the same?",
            "options": [
              "Global variable",
              "The local element",
              "The two of the above",
              "None of the above"
            ],
            "answer": "The local element",
            "explanation": "If there are variables with the same name in both the global and local scope of a program, the local variable takes precedence over the global one. This means that when you access the variable within the local scope, you'll be working with the local version of the variable, and it won't affect the global variable with the same name."
          },
          {
            "question": "Which one of the following is the correct way for calling the JavaScript code?",
            "options": [
              "Preprocessor",
              "Triggering Event",
              "RMI",
              "Function/Method"
            ],
            "answer": "Function/Method",
            "explanation": "The JavaScript code can be called simply by making the function call to the element on which the JavaScript code execution has to be run. There are several other ways to call JavaScript code such as submit, onclick, and onload, etc."
          },
          {
            "question": "In the JavaScript, which one of the following is not considered as an error:",
            "options": [
              "Syntax error",
              "Missing of semicolons",
              "Division by zero",
              "Missing of Bracket"
            ],
            "answer": "Division by zero",
            "explanation": "Yes, you heard right that division of any integer by zero is not an error in the JavaScript. It just prints the infinity as a result. However, there is an exception in JavaScript, dividing zero with zero will not have any defined number/value so, the result of this specific operation is a special value 'Not a Number' (or NaN) and printed as NaN."
          },
          {
            "question": "Which of the following number object functions returns the value of the number?",
            "options": [
              "toString()",
              "valueOf()",
              "toLocaleString()",
              "toPrecision()"
            ],
            "answer": "valueOf()",
            "explanation": "The valueOf() function returns the primitive value of the number object."
          },
          {
            "question": "Which of the following function of the String object returns the character in the string starting at the specified position via the specified number of characters?",
            "options": ["substr()", "substring()", "slice()", "splice()"],
            "answer": "substr()",
            "explanation": "The substr() function returns the character in the string starting at the specified position via the specified number of characters."
          },
          {
            "question": "Which of the following is not a JavaScript Data Types?",
            "options": ["Boolean", "Undefined", "Number", "Float"],
            "answer": "Float",
            "explanation": "In JavaScript, 'Float' is not a distinct data type. Instead, floating-point numbers are represented using the 'Number' data type, which can hold both integer and floating-point values."
          },
          {
            "question": "Which of the following syntax can be used to write \"Hello World\" in an alert box?",
            "options": [
              "alertBox(\"Hello World\");",
              "msgBox(\"Hello World\");",
              "alert(\"Hello World\");",
              "msg(\"Hello World\");"
            ],
            "answer": "alert(\"Hello World\");",
            "explanation": "\"alert(\"Hello World\");\" is the correct answer."
          },
          {
            "question": "Which of the following is the correct statement of WHILE loop start?",
            "options": [
              "while (i <= 10)",
              "while (i <= 10; i++)",
              "while i = 1 to 10",
              "None of These"
            ],
            "answer": "while (i <= 10)",
            "explanation": "\"while (i <= 10)\" is the correct answer."
          },
          {
            "question": "Which of the following is the correct way to write a comment in JavaScript code?",
            "options": [
              "//This is a comment",
              "/*This is a comment*/",
              "$This is a comment$",
              "**This is a comment**"
            ],
            "answer": "//This is a comment",
            "explanation": "//This is a comment is the correct option."
          },
          {
            "question": "What are the different types of Pop up boxes available in JavaScript?",
            "options": ["Alert", "Prompt", "Confirm", "All of the above"],
            "answer": "All of the above",
            "explanation": "Alert, Prompt, Confirm are the different types of Pop up boxes available in JavaScript, option \"All of the above\" is correct."
          },
          {
            "question": "Which of the following built-in method is used to remove the last element from an array and return that element?",
            "options": ["last", "pop()", "get()", "None of the above"],
            "answer": "pop()",
            "explanation": "The pop() method is the correct answer. It is used to remove the last element from an array and return that element."
          },
          {
            "question": "Which JavaScript String method can be used to find the index of the first occurrence of a specified substring within a string?",
            "options": ["indexOf()", "search()", "substring()", "slice()"],
            "answer": "indexOf()",
            "explanation": "The 'indexOf()' method is used to find the index of the first occurrence of a specified substring within a string."
          },
          {
            "question": "Which JavaScript Array method can be used to add one or more elements to the end of an array and returns the new length of the array?",
            "options": ["concat()", "push()", "pop()", "splice()"],
            "answer": "push()",
            "explanation": "The 'push()' method is used to add one or more elements to the end of an array and returns the new length of the array."
          }
        ]
      },
      "Java": {
        "questions": [
          {
            "question": "Which of the following is a valid declaration of a char?",
            "options": [
              "char ch = '\\utea';",
              "char ca = 'tea';",
              "char cr = '\\u0223';",
              "char cc = '\\itea';"
            ],
            "answer": "char ch = '\\utea';",
            "explanation": "A char literal may contain a Unicode character (UTF-16). We can directly use these characters only if our file system allows us, else use a Unicode escape (\\u) such as \"\\u02tee\". The char literals are always declared in single quotes (').\n\nThe option b, c, and d, are not valid because:\n\nIn the option b), to make a String valid char literal, we should add prefix \"\\u\" in the string.\nIn the option c), single quotes are not present.\nIn the option d), \"\\i\" is used in place of \"\\u.\"\nHence, the correct answer is the option (a)."
          },
          {
            "question": "Which of the following for loop declarations is not valid?",
            "options": [
              "for (int i = 99; i >= 0; i / 9)",
              "for (int i = 7; i <= 77; i += 7)",
              "for (int i = 20; i >= 2; --i)",
              "for (int i = 2; i <= 20; i = 2 * i)"
            ],
            "answer": "for (int i = 99; i >= 0; i / 9)",
            "explanation": "The first option is not a valid declaration because the assignment in the loop condition is incomplete. To make it valid, it should be corrected to 'for (int i = 99; i >= 0; i = i / 9)'. The other three loop declarations are valid and will execute correctly."
          },
          {
            "question": "Which method of the Class.class is used to determine the name of a class represented by the class object as a String?",
            "options": ["getClass()", "intern()", "getName()", "toString()"],
            "answer": "getName()",
            "explanation": "The getName() method of the Class class returns the name (as String) of the entity (class, interface) represented by this Class object. It is a non-static method, and available in the java.lang package. The getClass() method of the Object class returns the runtime class of this object. The intern() and toString() methods are of String class."
          },
          {
            "question": "What will be the output of the following program?",
            "code": [
              "public class MyFirst {",
              "  public static void main(String[] args) {",
              "    MyFirst obj = new MyFirst(n);",
              "  }",
              "  static int a = 10;",
              "  static int n;",
              "  int b = 5;",
              "  int c;",
              "  public MyFirst(int m) {",
              "    System.out.println(a + \", \" + b + \", \" + c + \", \" + n + \", \" + m);",
              "  }",
              "  {",
              "    b = 30;",
              "    n = 20;",
              "  }",
              "  static {",
              "    a = 60;",
              "  }",
              "}"
            ],
            "options": [
              "10, 5, 0, 20, 0",
              "10, 30, 20",
              "60, 5, 0, 20",
              "60, 30, 0, 20, 0"
            ],
            "answer": "60, 30, 0, 20, 0",
            "explanation": "In the above code, there are two values of variable 'a,' i.e., 10 and 60. Similarly, there are two values of variable 'b,' i.e., 5 and 30. But in the output, the values of 'a' and 'b' are 60 and 30, respectively. It is because of the execution order of the program. The execution order of the program is that the static block executes first, then the instance block, and then the constructor. Hence, the JVM will consider the value of 'a' and 'b' as 60 and 30 concerning the execution order. The value of 'a' = 10 and 'b' = 5 are of no use. And the value of variables 'c' and 'm' is 0 as we have not assigned any value to them."
          },
          {
            "question": "Find the output of the following program.",
            "code": [
              "public class Solution {",
              "   public static void main(String[] args) {",
              "       short x = 10;",
              "       x = x * 5;",
              "       System.out.print(x);",
              "   }",
              "}"
            ],
            "options": ["50", "10", "Compiler Error", "Exception"],
            "answer": "Compiler Error",
            "explanation": "The program will result in a compilation error. In Java, when you perform arithmetic operations on integer-type literals, such as multiplying a short by an int (5 in this case), the result is automatically promoted to int. In this case, the result of 'x * 5' is an int value. Attempting to assign this int value to a short variable 'x' without an explicit type cast will result in a compilation error."
          },
          {
            "question": "Select the valid statement.",
            "options": [
              "char[] ch = new char[5]",
              "char[] ch = new char(5)",
              "char[] ch = new char()",
              "char[] ch = new char[]"
            ],
            "answer": "char[] ch = new char[5]",
            "explanation": "The valid statement is 'char[] ch = new char[5]'. This statement declares an array of characters (char[]) named 'ch' with a size of 5. It creates an array object that can hold 5 characters. This is the correct syntax for creating a character array in Java.\n\nThe other statements are not valid:\n- 'char[] ch = new char(5)' is incorrect because you cannot specify the size of a character array using parentheses like this.\n- 'char[] ch = new char()' is incorrect because you need to specify the array size when creating an array.\n- 'char[] ch = new char[]' is incomplete and does not specify the array size or initialize the array."
          },
          {
            "question": "Find the output of the following program.",
            "code": [
              "public class Solution {",
              "   public static void main(String[] args) {",
              "       short x = 10;",
              "       x = x * 5;",
              "       System.out.print(x);",
              "   }",
              "}"
            ],
            "options": ["120 200 016", "120 200 14", "120 200 16", "None"],
            "answer": "120 200 14",
            "explanation": "The output of the program is '120 200 14'.\n\nIn the array 'x', there are three elements: 120, 200, and 016. In Java, if a number starts with '0', it is treated as an octal (base 8) number. So, '016' is interpreted as an octal number, which is equivalent to the decimal number '14'. Therefore, the array 'x' contains the values 120, 200, and 14.\n\nThe for loop iterates over the elements of the array and prints them, separated by spaces.\n\nHence, the correct answer is option (b) - '120 200 14'."
          },
          {
            "question": "Which keyword is used for accessing the features of a package?",
            "options": ["package", "import", "extends", "export"],
            "answer": "import",
            "explanation": "The import keyword is used to access the classes and interfaces of a particular package to the current file. In other words, it is used to import the user-defined and built-in classes and interfaces into the source file of java so that the current file can easily access the other packages by directly using its name. For example, 'import java.awt.*;' imports all the classes and interfaces of java.awt package. Whereas, 'import java.lang.Object;' only imports the Object class of the java.lang package. The package keyword is used to create a new package. The extends keyword indicates that the new class is derived from the base or parent class using inheritance, and export is not a keyword in Java."
          },
          {
            "question": "Select the valid statement to declare and initialize an array.",
            "options": [
              "int [] A = {}",
              "int [] A = {1,2,3}",
              "int [][]A = {1,2,3}",
              "int [] A = (1,2,3)"
            ],
            "answer": "int [] A = {1,2,3}",
            "explanation": "int[] A = {1, 2, 3} is the valid way of declaring arrays. It initializes an integer array 'A' with the values 1, 2, and 3."
          },
          {
            "question": "What is a constructor in JAVA?",
            "options": [
              "A special method to create instances of classes",
              "A method used for mathematical calculations",
              "A method to perform string manipulations",
              "An exception handling mechanism"
            ],
            "answer": "A special method to create instances of classes",
            "explanation": "Constructors typically initialize the instance variables of the class and perform any other setup required for the object to function correctly. So the answer is A special method to create instances of classes "
          },
          {
            "question": "What does the `length()` method of a String object in Java return?",
            "options": [
              "The capacity of the string",
              "The size of the string",
              "The length of the string",
              "The index of the last character"
            ],
            "answer": "The length of the string",
            "explanation": "In Java, the `length()` method of a String object returns the number of characters (i.e., the length) in the string. It does not return the capacity or size of the string, nor does it provide the index of the last character. Instead, it specifically gives you the count of characters in the string."
          },
          {
            "question": "How do you convert a string to lowercase in Java?",
            "options": [
              "str.toLower()",
              "str.toLowerCase()",
              "str.convertToLower()",
              "str.makeLowerCase()"
            ],
            "answer": "str.toLowerCase()",
            "explanation": "To convert a string to lowercase in Java, you should use the `toLowerCase()` method on the string object. This method returns a new string with all the characters converted to lowercase while leaving the original string unchanged. Option B, `str.toLowerCase()`, is the correct way to achieve this conversion in Java."
          },
          {
            "question": "What is the purpose of the `charAt()` method of a String object in Java?",
            "options": [
              "To add a character to the string",
              "To remove a character from the string",
              "To get the character at a specific index",
              "To get the length of the string"
            ],
            "answer": "To get the character at a specific index",
            "explanation": "The `charAt()` method of a String object in Java is used to retrieve the character at a specific index within the string. It does not add or remove characters from the string, nor does it provide the length of the string. Instead, it allows you to access and retrieve individual characters from the string by specifying the index position."
          },
          {
            "question": "What is the purpose of the charAt() method of a String object in Java?",
            "options": [
              "findIndex()",
              "indexOf()",
              "search()",
              "findCharacter()"
            ],
            "answer": "indexOf()",
            "explanation": "The charAt() method of a String object in Java is used to retrieve the character at a specific index within the string. It does not provide a method called findIndex(), search(), or findCharacter(). The correct method for finding the index of a character in a string is indexOf()."
          },
          {
            "question": "In Java, what is the result of the expression \"Hello\".substring(1, 4)?",
            "options": ["Hel", "H", "ell", "llo"],
            "answer": "ell",
            "explanation": "The expression \"Hello\".substring(1, 4) in Java returns the substring starting from index 1 (inclusive) to index 4 (exclusive) of the original string. So, the result is \"ell\"."
          },
          {
            "question": "What method is used to convert an integer to a string in Java?",
            "options": [
              "String.valueOf()",
              "Integer.toString()",
              "int.toString()",
              "parseToString()"
            ],
            "answer": "String.valueOf()",
            "explanation": "In Java, the method used to convert an integer to a string is `String.valueOf()`. This method takes an integer as an argument and returns its string representation."
          }
        ]
      },
      "C++": {
        "questions": [
          {
            "question": "Which of the following is the correct syntax to print the message in C++ language?",
            "options": [
              "cout <<\"Hello world!\";",
              "Cout << Hello world! ;",
              "Out <<\"Hello world!;",
              "None of the above"
            ],
            "answer": "cout <<\"Hello world!\";",
            "explanation": "To print a message in the C++ language, you should use the 'cout <<' syntax. Additionally, it's essential to include the necessary header and 'using namespace std;' statement for proper usage, as shown in the example code."
          },
          {
            "question": "Which of the following is the correct identifier?",
            "options": [
              "$var_name",
              "VAR_123",
              "varname@",
              "None of the above"
            ],
            "answer": "VAR_123",
            "explanation": "The correct identifier follows certain rules: it may contain uppercase/lowercase letters, digits, and underscores (_) only. It must start with non-digit characters and should not contain special characters like $, @, etc."
          },
          {
            "question": "Constant function in C++ can be declared as",
            "options": [
              "void display()",
              "void display() const",
              "const void display()",
              "void const display()"
            ],
            "answer": "void display() const",
            "explanation": "A constant function in C++ is declared with the 'const' keyword after the function declaration, like 'void display() const'. It is used to prevent modification of class member variables inside its body when you only want to read member variables."
          },
          {
            "question": "What did we call an array of the one-dimensional array?",
            "options": [
              "Single Dimensional array",
              "Multi-Dimensional array",
              "2D Array (or 2-Dimensional array)",
              "Both A and B"
            ],
            "answer": "2D Array (or 2-Dimensional array)",
            "explanation": "An array of one-dimensional array is known as a 2-dimensional array or 2D Array. It represents a matrix or a table-like structure."
          },
          {
            "question": "Which of the following is an insertion operator in C++?",
            "options": ["<<", ">>", "->", "<<<"],
            "answer": "<<",
            "explanation": "In C++, '<<' is known as the insertion operator, used with the 'cout' object to print data on the console screen."
          },
          {
            "question": "Which of the following can be considered as the correct syntax for declaring an array of pointers of integers that has a size of 10 in C++?",
            "options": [
              "int arr = new int[10];",
              "int *arr = new int*[10]",
              "int **arr = new int*[10];",
              "int *arr = new int[10];"
            ],
            "answer": "int **arr = new int*[10];",
            "explanation": "To declare an array of integer pointers in C++, you need to use a double-pointer array where each element is a pointer to an integer."
          },
          {
            "question": "Which of the following can be considered as the members that can be inherited but not accessible in any class?",
            "options": ["Public", "Protected", "Private", "Both A and C"],
            "answer": "Private",
            "explanation": "The 'Private' members of a class can be inherited by a child class but are not accessible from the child class."
          },
          {
            "question": "Pick out the compound assignment statement.",
            "options": ["a = a - 5", "a = a / b", "a -= 5", "a = a + 5"],
            "answer": "a -= 5",
            "explanation": "The compound assignment statement is a shorthand way of modifying a variable by performing an operation on its current value. In this case, 'a -= 5' is equivalent to 'a = a - 5.'"
          },
          {
            "question": "Which of the following accesses the seventh element stored in an array?",
            "options": ["array[6];", "array[7];", "array(7);", "array;"],
            "answer": "array[6];",
            "explanation": "In most programming languages, array indexing starts from zero. So, 'array[6]' would access the seventh element in the array."
          },
          {
            "question": "A switch construct can be used with which of the following types of variable?",
            "options": [
              "int",
              "int, char",
              "int, float, char",
              "Any basic datatype"
            ],
            "answer": "int, char",
            "explanation": "A switch construct in most programming languages can be used with integer and character (char) variables. So, the correct option is 'int, char.'"
          },
          {
            "question": "Which of the following is illegal?",
            "options": [
              "int *ip;",
              "string s, *sp = 0;",
              "int i; double* dp = &i;",
              "int *pi = 0;"
            ],
            "answer": "int i; double* dp = &i;",
            "explanation": "int i; double* dp = &i; is illegal because it attempts to initialize a pointer to a double (double*) with the address of an integer variable (&i). Pointer types should match the types of the variables they point to."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "int main() {",
              "    int a = 0;",
              "    int b = 10;",
              "    a = 2;",
              "    b = 7;",
              "    if (a && b) {",
              "        cout << \"true: \" << endl;",
              "    }",
              "    else {",
              "        cout << \"false: \" << endl;",
              "    }",
              "    return 0;",
              "}"
            ],
            "options": ["true", "false", "error", "10"],
            "answer": "true",
            "explanation": "The code assigns the values 2 to 'a' and 7 to 'b'. In the 'if' condition, 'a && b' checks if both 'a' and 'b' are nonzero. Since both are nonzero, the condition is true, and 'true' is printed."
          },
          {
            "question": "Which is more effective while calling the functions?",
            "options": [
              "call by value",
              "call by reference",
              "call by pointer",
              "call by object"
            ],
            "answer": "call by reference",
            "explanation": "In the call by reference, it passes the reference of the memory addresses of passed values rather than copying the value to new memories, which reduces the overall time and memory use."
          },
          {
            "question": "Which of the following is used to create an output stream?",
            "options": ["ofstream", "ifstream", "iostream", "fstream"],
            "answer": "ofstream",
            "explanation": "ofstream is used to create an output stream in C++ file handling operations. Ofstream objects are used to write to files."
          },
          {
            "question": "What is the return type of the open() method?",
            "options": ["int", "char", "bool", "float"],
            "answer": "bool",
            "explanation": "The open() method returns a bool value indicating whether the file is opened successfully or if some error has occurred during the process."
          }
        ]
      },
      "PHP": {
        "questions": [
          {
            "question": "Which of the following is the correct way to create a function in PHP?",
            "options": [
              "Create myFunction()",
              "New_function myFunction()",
              "function myFunction()",
              "None of the above"
            ],
            "answer": "function myFunction()",
            "explanation": "We can declare and call user-defined functions easily. The syntax to declare user-defined functions is given below -\n\nfunction functionname(){\n//code to be executed\n}"
          },
          {
            "question": "Which of the following is the correct way of defining a variable in PHP?",
            "options": [
              "$variable name = value;",
              "$variable_name = value;",
              "$variable_name = value",
              "$variable name as value;"
            ],
            "answer": "$variable_name = value;",
            "explanation": "In PHP, a variable is declared using a $ sign followed by the variable name. A PHP variable name cannot contain spaces.\n\nSyntax of declaring a variable in PHP is given below:\n\n$variable_name=value;"
          },
          {
            "question": "What is the use of isset() function in PHP?",
            "options": [
              "The isset() function is used to check whether variable is set or not",
              "The isset() function is used to check whether the variable is free or not",
              "The isset() function is used to check whether the variable is string or not",
              "None of the above"
            ],
            "answer": "The isset() function is used to check whether a variable is set or not",
            "explanation": "The isset() function is a built-in function of PHP, which is used to determine that a variable is set or not. If a variable is considered set, it means the variable is declared and has a different value from the NULL. In short, it checks that the variable is declared and not null. This function returns true if the variable is not null, otherwise it returns false."
          },
          {
            "question": "Which of the following function is used to set cookie in PHP?",
            "options": [
              "createcookie()",
              "makecookie()",
              "setcookie()",
              "None of the above"
            ],
            "answer": "setcookie()",
            "explanation": "PHP cookie is a small piece of information that is stored at the client's browser. It is used to recognize the user. PHP setcookie() function is used to set a cookie with an HTTP response. Once the cookie is set, you can access it by the $_COOKIE superglobal variable."
          },
          {
            "question": "Which of the following is the correct way to create an array in PHP?",
            "options": [
              "$season = array[\"summer\" , \"winter\" , \"spring\" , \"autumn\"];",
              "$season = array(\"summer\" , \"winter\" , \"spring\" , \"autumn\");",
              "$season = \"summer\" , \"winter\" , \"spring\" , \"autumn\";",
              "All of the above"
            ],
            "answer": "$season = array(\"summer\" , \"winter\" , \"spring\" , \"autumn\");",
            "explanation": "The correct way to create an array in PHP is by using the format: $season = array(\"summer\", \"winter\", \"spring\", \"autumn\");"
          },
          {
            "question": "Which of the following is the correct way to print \"Hello World\" in PHP?",
            "options": [
              "\"Hello World\";",
              "write(\"Hello World\");",
              "echo \"Hello World\";",
              "None of the above"
            ],
            "answer": "echo \"Hello World\";",
            "explanation": "PHP echo is a language construct, not a function. Therefore, you don't need to use parentheses with it. The correct way to print \"Hello World\" in PHP is: echo \"Hello World\";"
          },
          {
            "question": "Which of the following function converts a string to all uppercase?",
            "options": [
              "upper()",
              "uppercase()",
              "struppercase()",
              "strtoupper()"
            ],
            "answer": "strtoupper()",
            "explanation": "The strtoupper() is one of the most popular functions of PHP, which is widely used to convert the string into uppercase. It takes a string as a parameter and converts all lowercase English characters of that string to uppercase."
          },
          {
            "question": "What will be the output of the following program?",
            "code": [
              "<?php",
              "$var1 = 'Hello';",
              "$var2 = 'World';",
              "echo $var1, $var2;",
              "?>"
            ],
            "options": [
              "HelloWorld",
              "Hello, World",
              "Hello World",
              "None of the above"
            ],
            "answer": "HelloWorld",
            "explanation": "We can pass multiple strings separated by a comma (,) in echo. In the echo statement, the , (comma) operator is also used to join strings."
          },
          {
            "question": "What will be the output of the following program?",
            "code": [
              "<?php",
              "$a;",
              "if ($a)",
              "{",
              "echo 'hi';",
              "}",
              "else",
              "{",
              "echo 'How are you';",
              "}",
              "?>"
            ],
            "options": [
              "Hi How are you",
              "How are you",
              "Hi",
              "None of the above"
            ],
            "answer": "How are you",
            "explanation": "In the given program, the variable $a is uninitialized. So, the if condition will fail, and the echo statement of the else block will be printed on the screen."
          },
          {
            "question": "Which of the following is not a variable scope in PHP?",
            "options": ["Extern", "Local", "Static", "Global"],
            "answer": "Extern",
            "explanation": "The scope of a variable is defined as its range in the program under which it can be accessed. PHP has three types of variable scopes: Local variable, Global variable, and Static variable."
          },
          {
            "question": "Which of the following is used for concatenation in PHP?",
            "options": ["+ (plus)", "* (Asterisk)", ". (dot)", "append()"],
            "answer": ". (dot)",
            "explanation": "In PHP, the . (dot) operator is used for concatenation. Suppose there are two variables $a and $b, so the statement $a . $b will concatenate both $a and $b."
          },
          {
            "question": "How do you create a session in PHP?",
            "options": [
              "Using the session_start() function",
              "By declaring a session using $session = new Session()",
              "Using the setSession() method",
              "Sessions cannot be created in PHP"
            ],
            "answer": "Using the session_start() function",
            "explanation": "In PHP, sessions are created and managed using the session_start() function. This function initializes a new session or resumes the existing session if one exists. It should be called at the beginning of your PHP script to start or resume a session."
          },
          {
            "question": "How can you destroy a session in PHP?",
            "options": [
              "Using the session_destroy() function",
              "By setting the session variable to null",
              "Closing the browser",
              "Sessions cannot be destroyed in PHP"
            ],
            "answer": "Using the session_destroy() function",
            "explanation": "In PHP, you can destroy a session and delete all the session data associated with it using the session_destroy() function. This function terminates the current session and clears all session variables. It should be called when you want to log a user out or terminate a session."
          },
          {
            "question": "Which of the following is the correct use of the strcmp() function in PHP?",
            "options": [
              "The strcmp() function is used to compare the strings excluding case",
              "The strcmp() function is used to compare the uppercase strings",
              "The strcmp() function is used to compare the lowercase strings",
              "The strcmp() function is used to compare the strings including case"
            ],
            "answer": "The strcmp() function is used to compare the strings including case",
            "explanation": "The strcmp() is a string comparison function in PHP. It is case-sensitive, meaning it treats uppercase and lowercase characters separately. It is used to compare two strings and determine whether one string is greater, less than, or equal to another string, considering the case of characters."
          }
        ]
      }
    },
    "Intermediate": {
      "Python": {
        "questions": [
          {
            "question": "What will be the output of the following Python code?",
            "code": [
              "l=[1, 0, 2, 0, 'hello', '', []]",
              "list(filter(bool, l))"
            ],
            "options": [
              "[1, 0, 2, ‘hello’, ”, []]",
              "Error",
              "[1, 2, ‘hello’]",
              "[1, 0, 2, 0, ‘hello’, ”, []]"
            ],
            "answer": "[1, 2, ‘hello’]",
            "explanation": "The code shown above returns a new list containing only those elements of the list l which do not amount to zero. Hence the output is: [1, 2, ‘hello’]."
          },
          {
            "question": "Which of the following is not a core data type in Python programming?",
            "options": ["Tuples", "Lists", "Class", "Dictionary"],
            "answer": "Class",
            "explanation": "Class is a user-defined data type."
          },
          {
            "question": "What will be the output of the following Python function?",
            "code": ["min(max(False,-3,-4), 2,7)"],
            "options": ["-4", "-3", "2", "False"],
            "answer": "False",
            "explanation": "The function max() is being used to find the maximum value from among -3, -4, and false. Since false amounts to the value zero, hence we are left with min(0, 2, 7) Hence the output is 0 (false)."
          },
          {
            "question": "What will be the output of the following Python expression if x=56.236?",
            "code": ["print(\"%.2f\"%x)"],
            "options": ["56.236", "56.23", "56.0000", "56.24"],
            "answer": "56.24",
            "explanation": "The expression shown above rounds off the given number to the number of decimal places specified. Since the expression given specifies rounding off to two decimal places, the output of this expression will be 56.24. Had the value been x=56.234 (last digit being any number less than 5), the output would have been 56.23."
          },
          {
            "question": "What will be the output of the following Python function?",
            "code": "len([\"hello\",2, 4, 6])",
            "options": ["Error", "6", "4", "3"],
            "answer": "4",
            "explanation": "The function len() returns the length of the number of elements in the iterable. Therefore the output of the function shown above is 4."
          },
          {
            "question": "What will be the output of the following Python code snippet?",
            "code": ["for i in [1, 2, 3, 4][::-1]:", "    print(i)"],
            "options": ["4 3 2 1", "error", "1 2 3 4", "none of the mentioned"],
            "answer": "4 3 2 1",
            "explanation": "[::-1] reverses the list."
          },
          {
            "question": "What will be the output of the following Python statement?",
            "code": ["\"a\" + \"bc\""],
            "options": ["bc", "abc", "a", "bca"],
            "answer": "abc",
            "explanation": "+ operator is concatenation operator."
          },
          {
            "question": "Which function is called when the following Python program is executed?",
            "code": ["f = foo()", "format(f)"],
            "options": ["str()", "format()", "__str__()", "__format__()"],
            "answer": "__str__()",
            "explanation": "Both str(f) and format(f) call f.__str__()."
          },
          {
            "question": "What will be the output of the following Python program?",
            "code": [
              "def foo(x):",
              "    x[0] = ['def']",
              "    x[1] = ['abc']",
              "    return id(x)",
              "q = ['abc', 'def']",
              "print(id(q) == foo(q))"
            ],
            "options": ["Error", "None", "False", "True"],
            "answer": "True",
            "explanation": "The same object is modified in the function."
          },
          {
            "question": "What arithmetic operators cannot be used with strings in Python?",
            "options": ["*", "–", "+", "All of the mentioned"],
            "answer": "-",
            "explanation": "+ is used to concatenate and * is used to multiply strings."
          },
          {
            "question": "What will be the output of the following Python code?\n\nprint(\"abc. DEF\".capitalize())",
            "options": ["Abc. def", "abc. def", "Abc. Def", "ABC. DEF"],
            "answer": "Abc. def",
            "explanation": "The first letter of the string is converted to uppercase and the others are converted to lowercase."
          }
        ]
      },
      "JavaScript": {
        "questions": [
          {
            "question": "Do you know what will be the output of this code?",
            "code": [
              "const numbers = [33, 2, 8];",
              "numbers.sort();",
              "console.log(numbers[1]);"
            ],
            "options": ["33", "2", "8", "1"],
            "answer": "33",
            "explanation": "The code sorts the 'numbers' array using the Array.prototype.sort() method, which converts all values to their string representation and then sorts them in lexicographic order. This results in ['2', '33', '8'] as the sorted array. When we print 'numbers[1]', it returns '33' because it is the second element (zero-based index) in the sorted array."
          },
          {
            "question": "Do you know what will be the output of this code?",
            "code": ["console.log(018 - 015);"],
            "options": ["NaN", "5", "13"],
            "answer": "5",
            "explanation": "In earlier versions of JavaScript, a leading '0' on a number marked an octal number. Octal numbers have a base of 8, so valid digits are from 0 to 7. In the expression '018 - 015', '018' is treated as an octal number, but it's not a valid octal number because it contains '8'. Therefore, it's treated as a decimal number, and '015' is treated as a valid octal number, which is equivalent to '13' in decimal. The expression evaluates to '5' in decimal."
          },
          {
            "question": "Do you know what will be the output of this code?",
            "code": ["console.log(1 +  \"2\" + \"2\");"],
            "options": ["122", "32", "NaN2", "NaN"],
            "answer": "122",
            "explanation": "In JavaScript, when you use the '+' operator with a string and a number, JavaScript converts the number to a string and performs string concatenation. So, '1 + \"2\"' results in '12', and then '12 + \"2\"' results in '122'. The final output is '122'."
          },
          {
            "question": "Do you know what will be the output of this code?",
            "code": ["console.log(String.raw`HelloTwitter\\nworld`);"],
            "options": [
              "\"HelloTwitter\\nworld\"",
              "\"HelloTwitter\nworld\"",
              "\"HelloTwitter world\"",
              "\"Hello Twitter world\""
            ],
            "answer": "\"HelloTwitter\\nworld\"",
            "explanation": "The `String.raw` function is used to get the raw string representation of a template literal. In the provided code, `HelloTwitter\\nworld` is a raw string with the escape sequence `\\n`, which represents a newline character. Therefore, the output will be the raw string itself: \"HelloTwitter\\nworld\"."
          },
          {
            "question": "Do you know what will be the output of this code?",
            "code": ["console.log(typeof typeof 1);"],
            "options": ["string", "number", "1", "true"],
            "answer": "string",
            "explanation": "In JavaScript, the `typeof` operator is used to determine the data type of a value or expression. In the provided code, `typeof 1` returns the string 'number' because `1` is a number. Therefore, `typeof typeof 1` first evaluates `typeof 1`, which is 'string' (the data type of the result of `typeof`), and then the outer `typeof` returns 'string' because it's the data type of the inner `typeof` result."
          },
          {
            "question": "Can you guess the result?",
            "code": ["console.log(('b' + 'a' + + 'a' + 'a').toLowerCase());"],
            "options": ["bananaa", "baaa", "banana", "ananas"],
            "answer": "banana",
            "explanation": "The expression ('b' + 'a' + + 'a' + 'a') evaluates to 'banana'. Here's why:\n\n- 'b' + 'a' results in 'ba'.\n- +'a' attempts to convert 'a' to a number, which results in NaN (Not-a-Number).\n- 'ba' + NaN results in 'baNaN'.\n- Finally, 'baNaN' + 'a' results in 'banana'.\n\nThe `toLowerCase()` method is then applied to convert 'banana' to lowercase, resulting in the final output 'banana'."
          },
          {
            "question": "Do you know what will be the output of this code?",
            "code": [
              "let array = [1, 2, 3];",
              "array[6] = 9;",
              "console.log(array[5]);"
            ],
            "options": ["1", "2", "9", "undefined"],
            "answer": "undefined",
            "explanation": "The output of the code will be 'undefined'.\n\nIn JavaScript, when you assign a value to an array element with an index that is greater than the current length of the array, JavaScript will create 'empty' or 'undefined' slots in the array for the indices in between. In this code, the array 'array' initially contains elements at indices 0, 1, and 2. When you set 'array[6] = 9;', JavaScript creates empty slots at indices 3, 4, and 5. Therefore, when you try to access 'array[5]', it returns 'undefined' because there is no value assigned to that index."
          },
          {
            "question": "Do you know what will be the output of this code?",
            "code": ["console.log(false == '0');"],
            "options": ["false", "true"],
            "answer": "true",
            "explanation": "The output of the code will be 'true'.\n\nIn JavaScript, when you use the '==' operator for comparison, type coercion is performed. In this case, the boolean 'false' is being compared to the string '0'. JavaScript attempts to convert both values to a common type for comparison. When a boolean is compared to any other type, it is first converted to a number. In JavaScript, 'false' is equivalent to the number '0'. Therefore, the comparison 'false == '0'' evaluates to 'true' because '0' (as a string) is considered equal to '0' (as a number) after type coercion."
          },
          {
            "question": "Do you know what will be the output of this code?",
            "code": ["console.log(0.1 + 0.2 == 0.3);"],
            "options": ["true", "false"],
            "answer": "false",
            "explanation": "0.1 + 0.2 -> 0.30000000000000004. \n(And 0.30000000000000004 is never equal to 0.3.)"
          },
          {
            "question": "Can you guess what will be the output of the code below?",
            "code": ["console.log(typeof NaN);"],
            "options": ["NaN", "number", "null", "undefined"],
            "answer": "number",
            "explanation": "In JavaScript, typeof NaN returns 'number' because NaN (Not-a-Number) is considered a numeric data type."
          },
          {
            "question": "Choose the correct snippet from the following to check if the variable 'a' is not equal to 'null':",
            "options": ["if(a!==null)", "if (a!)", "if(a!null)", "if(a!=null)"],
            "answer": "if(a!==null)",
            "explanation": "The correct way to check if a variable 'a' is not equal to 'null' in JavaScript is by using the strict inequality operator '!=='."
          },
          {
            "question": "Consider the following snippet of JavaScript code, which one of the following statement is most suitable to check if the pattern matches with the string 'text'?",
            "code": [
              "var text = 'testing: 1, 2, 3'; // Sample text",
              "var pattern = /\\d+/g; // Matches all instances of one or more digits\n"
            ],
            "options": [
              "test(text)",
              "equals(pattern)",
              "test(pattern)",
              "text == pattern"
            ],
            "answer": "text == pattern",
            "explanation": "The pattern is applied to the string 'text' by comparing it with the '==' operator."
          },
          {
            "question": "Which of the following syntax is correct to refer to an external script called \"LFC.js\"?",
            "options": [
              "<script source=\"LFC.js\">",
              "<script ref=\"LFC.js\">",
              "<script src=\"LFC.js\">",
              "<script type=\"LFC.js\">"
            ],
            "answer": "<script src=\"LFC.js\">",
            "explanation": "<script src=\"LFC.js\"> is the correct answer. The \"src\" is used to refer to any JavaScript file."
          },
          {
            "question": "In JavaScript, do the functions always return a value?",
            "options": [
              "Yes, functions always return a value",
              "No, it is not necessary",
              "A number of functions return values by default",
              "Some functions do not return any value"
            ],
            "answer": "Some functions do not return any value"
          },
          {
            "question": "Which one of the following options is the correct output for the given code of JavaScript?",
            "code": [
              "var values = [4, 5, 6, 7];",
              "var ans = values.slice(1);",
              "document.writeln(ans);"
            ],
            "options": ["Error", "5, 6, 7", "4, 5, 6", "4, 5, 6, 7"],
            "answer": "5, 6, 7",
            "explanation": "The `slice()` method in JavaScript is used to create a shallow copy of a portion of an array into a new array. In this code, it starts from index 1 and includes elements 5, 6, and 7 in the new array. The correct output will be '5, 6, 7.'"
          },
          {
            "question": "Which one of the following options is the correct output for the given code of JavaScript?",
            "code": [
              "var arr = [4, 3, 2, 1];",
              "var rev = arr.reverse();",
              "document.writeln(rev);"
            ],
            "options": ["1, 2, 3, 4", "4, 3, 2, 1", "3", "1"],
            "answer": "1, 2, 3, 4",
            "explanation": "The 'reverse()' method in JavaScript is used to reverse the order of elements in an array. In this code, the array 'arr' is reversed using 'reverse()', so it becomes [1, 2, 3, 4]. When 'document.writeln(rev)' is called, it prints the reversed array, resulting in '1, 2, 3, 4' as the correct output."
          }
        ]
      },
      "Java": {
        "questions": [
          {
            "question": "What is the return type of the hashCode() method in the Object class?",
            "options": ["Object", "int", "long", "void"],
            "answer": "int",
            "explanation": "In Java, the return type of hashCode() method is an integer, as it returns a hash code value for the object."
          },
          {
            "question": "What will be the output of the following program?",
            "code": [
              "public class Test {",
              "public static void main(String[] args) {",
              "int count = 1;",
              "while (count <= 15) {",
              "System.out.println(count % 2 == 1 ? \"***\" : \"+++++\");",
              "++count;",
              "} // end while",
              "} // end main",
              "}"
            ],
            "options": [
              "15 times ***",
              "15 times +++++",
              "8 times *** and 7 times +++++",
              "Both will print only once"
            ],
            "answer": "8 times *** and 7 times +++++",
            "explanation": "The program uses a while loop to print '***' or '+++++' based on the value of count. Since count starts at 1 and increments by 1 in each iteration, it will print '***' when count is odd and '+++++' when count is even. This pattern continues until count reaches 15. As a result, it will print '***' 8 times and '+++++' 7 times."
          },
          {
            "question": "Given that Student is a class, how many reference variables and objects are created by the following code?",
            "code": [
              "Student studentName, studentId;",
              "studentName = new Student();",
              "Student stud_class = new Student();"
            ],
            "options": [
              "Three reference variables and two objects are created.",
              "Two reference variables and two objects are created.",
              "One reference variable and two objects are created.",
              "Three reference variables and three objects are created."
            ],
            "answer": "Three reference variables and two objects are created.",
            "explanation": "In the above code, there are three reference variables and two objects. The studentName, studentId, and stud_class are the three reference variables. The objects are those variables that are created using the new operator, i.e., studentName and stud_class. The studentId is only a reference variable as it is not declared using the new operator. Both studentName and stud_class are reference variables as well as objects."
          },
          {
            "question": "What will be the output of the following Java code?",
            "code": [
              "public class ConcatNull {",
              "  public static void main(String[] args) {",
              "    String str1 = \"include\";",
              "    String str2 = \"help\";",
              "    System.out.println(str1 + str2);",
              "  }",
              "}"
            ],
            "options": ["includehelp", "include", "help", "None of these"],
            "answer": "includehelp",
            "explanation": "In the above code, the '+' operator is concatenating both of the strings."
          },
          {
            "question": "What will be the output of following Java code?",
            "code": [
              "public class Main {",
              "  public static void main(String arg[]) {",
              "    int i;",
              "    for (i = 1; i <= 12; i += 2) {",
              "      if (i == 8) {",
              "        System.out.println(i);",
              "        break;",
              "      }",
              "    }",
              "  }",
              "}"
            ],
            "options": ["1", "No output", "8", "1357911"],
            "answer": "No output",
            "explanation": "The condition (i == 8) could not be satisfied, hence nothing is printed."
          },
          {
            "question": "Static variables in java are declared as ___.",
            "options": [
              "final variables",
              "new variables",
              "Constants",
              "All of these"
            ],
            "answer": "Constants",
            "explanation": "The static variables declarations just like constants, they require the static keyword and an initial value."
          },
          {
            "question": "Find the value of values[i]?",
            "code": [
              "int values[] = {1,2,3,4,5,6,7,8,9,10};",
              "for(int i=0;i< Y; ++i)",
              "System.out.println(values[i]);"
            ],
            "options": ["10", "11", "15", "None of the above"],
            "answer": "None of the above",
            "explanation": "In the above code, we have not defined the variable Y. The code will not execute without any specific value for Y; it results in an exception. So, the values of i will not be printed, and the above exception is thrown."
          },
          {
            "question": "What will be the output of the following program?",
            "code": [
              "abstract class MyFirstClass{",
              "  abstract num (int a, int b){",
              "  }",
              "}"
            ],
            "options": [
              "No error",
              "Method is not defined properly",
              "Constructor is not defined properly",
              "Extra parentheses"
            ],
            "answer": "Method is not defined properly.",
            "explanation": "Following are some rules for declaring an abstract method:\n\n- Abstract methods do not specify a method body, but they only have a method signature.\n- Abstract methods are always defined inside an abstract class.\n\nIn the above code, MyFirstClass is an abstract class. It contains an abstract method named num() that is not defined properly. According to the rules discussed above, an abstract method only has a method signature, not the method body.\n\nHence, the correct answer is Method is not defined properly."
          },
          {
            "question": "What is meant by the classes and objects that dependents on each other?",
            "options": [
              "Tight Coupling",
              "Cohesion",
              "Loose Coupling",
              "None of the above"
            ],
            "answer": "Tight Coupling",
            "explanation": "In tight coupling, a group of classes and objects are highly dependent on each other. Tight coupling is also used in some cases, like when an object creates some other objects that are going to be used by them.\n\nTight coupling is the correct answer as it is used when the logic of one class is called by the logic of another class."
          },
          {
            "question": "The super() method is used to ___.",
            "options": [
              "Call constructor of friend class",
              "Is a declared method",
              "Call constructor of the parent class",
              "Call constructor"
            ],
            "answer": "Call constructor of the parent class",
            "explanation": "In Java programming language, the super() is a reference variable that is used to refer parent class constructors. The super can be used to call parent class's variables and methods. The super() can be used to call parent class' constructors only."
          },
          {
            "question": "Consider the following program and predict the output:",
            "code": ["public class Test {",    
            " public static void main(String[] args) {",        
            "  String s = new String(\"5\");",        
            "    System.out.println(1 + 10 + s + 1 + 10);",   
             " }",
             "}"
            ],
            "options": ["11511", "1105110", "115110", "27"],
            "answer": "115110",
            "explanation": "The output of the program will be '115110'. In Java, when you use the '+' operator with a String, it performs concatenation. So, the expression '1 + 10 + s + 1 + 10' is evaluated as '115' (1 + 10) concatenated with '5' (the value of String s) concatenated with '1' concatenated with '10'. This results in '115110'."
          },
          {
            "question": "Which package is used for basic I/O operations in Java?",
            "options": ["java.lang", "java.io", "java.util", "java.nio"],
            "answer": "java.io",
            "explanation": "The correct option is java.io"
          },
          {
            "question": "What is the output of the following Java program?",
            "code" : [
              "public class Main{",    
              "public static void main(String []args){",
              "  int x = 10;",
              "   while (x > 0) {",            
              "     System.out.print(x + \" \");",            
              "     x--;",      
              "   }",
              " }",
              "}"
            ],
            "options": [
              "10 9 8 7 6 5 4 3 2 1",
              "10 9 8 7 6 5 4 3 2 1 0",
              "1 2 3 4 5 6 7 8 9 10",
              "The code will not compile due to a syntax error."
            ],
            "answer": "10 9 8 7 6 5 4 3 2 1",
            "explanation": "The given Java program initializes an integer variable 'x' with the value 10. It then enters a 'while' loop that continues as long as 'x' is greater than 0. Inside the loop, it prints the value of 'x' followed by a space and decrements 'x' by 1 in each iteration.\n\nAs a result, the program prints the numbers from 10 down to 1, separated by spaces, which corresponds to option (a) '10 9 8 7 6 5 4 3 2 1.'"
          },
          {
            "question": "What is the output of the following Java program?",
            "code": [
              "class Automobile {",
              "    private String drive() {",
              "        return \"Driving vehicle\";",
              "    }",
              "}",
              "",
              "class Car extends Automobile {",
              "    protected String drive() {",
              "        return \"Driving car\";",
              "    }",
              "}",
              "",
              "public class ElectricCar extends Car {",
              "    @Override",
              "    public final String drive() {",
              "        return \"Driving an electric car\";",
              "    }",
              "",
              "    public static void main(String[] wheels) {",
              "        final Car car = new ElectricCar();",
              "        System.out.print(car.drive());",
              "    }",
              "}"
            ],
            "options": [
              "Driving vehicle",
              "Driving an electric car",
              "Driving car",
              "The code does not compile"
            ],
            "answer": "Driving an electric car",
            "explanation": "The output of the given Java program is 'B. Driving an electric car' because it calls the 'drive()' method of the 'ElectricCar' class. In Java, when a method is overridden in a subclass and marked with the 'final' keyword, it cannot be further overridden by any subclass. In this case, the 'drive()' method in the 'ElectricCar' class is marked as 'final', so it cannot be overridden again. Therefore, when 'car.drive()' is called in the 'main' method, it invokes the 'drive()' method of the 'ElectricCar' class, which returns 'Driving an electric car'."
          }
        ]
      },
      "C++": {
        "questions": [
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "struct Time {",
              "    int hours, minutes, seconds;",
              "};",
              "int toSeconds(Time now);",
              "int main() {",
              "    Time t;",
              "    t.hours = 5;",
              "    t.minutes = 30;",
              "    t.seconds = 45;",
              "    cout << \"Total seconds: \" << toSeconds(t) << endl;",
              "    return 0;",
              "}",
              "int toSeconds(Time now) {",
              "    return 3600 * now.hours + 60 * now.minutes + now.seconds;",
              "}"
            ],
            "options": ["19845", "20000", "15000", "19844"],
            "answer": "19845",
            "explanation": "The code converts the given hours and minutes into seconds and then prints the total seconds, which is 19845."
          },
          {
            "question": "Which of the following is a properly defined structure?",
            "options": [
              "struct {int a;}",
              "struct a_struct {int a;}",
              "struct a_struct int a;",
              "struct a_struct {int a;};"
            ],
            "answer": "struct a_struct {int a;};",
            "explanation": "Option d is the correct definition of a structure. It includes the structure name 'a_struct,' followed by a proper structure definition with curly braces."
          },
          {
            "question": "Which of the following accesses a variable in structure *b?",
            "options": ["b->var;", "b.var;", "b-var;", "b>var;"],
            "answer": "b->var;",
            "explanation": "Option a is correct because the arrow operator (->) is used to access members of a structure pointer, while the dot operator (.) is used to access normal structure variables."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "int main() {",
              "    if (0) {",
              "        cout << \"Hello\" ;",
              "    }",
              "    else",
              "    {",
              "        cout << \"Good Bye\" ;",
              "    }",
              "    return 0;",
              "}"
            ],
            "options": [
              "Hello",
              "Good Bye",
              "HelloGood bye",
              "Compilation Error"
            ],
            "answer": "Good Bye",
            "explanation": "In this code, the condition 'if (0)' is always false, so the code inside the 'else' block is executed. Therefore, the output will be 'Good Bye'."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "int main() {",
              "    int a, b, c;",
              "    a = 2;",
              "    b = 7;",
              "    c = (a > b) ? a : b;",
              "    cout << \"c: \" << c;",
              "    return 0;",
              "}"
            ],
            "options": ["2", "7", "9", "14"],
            "answer": "7",
            "explanation": "In this code, the conditional (ternary) operator '?' is used to assign the value of 'a' to 'c' if 'a' is greater than 'b', otherwise, it assigns the value of 'b' to 'c'. Since 'a' (2) is not greater than 'b' (7), 'c' is assigned the value of 'b', which is 7. Therefore, the output will be 'c: 7'."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "int main() {",
              "    int array[] = {0, 2, 4, 6, 7, 5, 3};",
              "    int n, result = 0;",
              "    for (n = 0; n < 8; n++){",
              "        result += array[n];",
              "    }",
              "    cout << result;",
              "    return 0;",
              "}"
            ],
            "options": ["25", "26", "27", "21"],
            "answer": "27",
            "explanation": "In this code, an integer array 'array' is defined with 7 elements. The 'for' loop iterates from 0 to 7, adding each element of the array to the 'result' variable. The sum of all elements in the array is 0 + 2 + 4 + 6 + 7 + 5 + 3, which equals 27. Therefore, the output will be '27'."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "int main() {",
              "    int a = 5, b = 10, c = 15;",
              "    int arr[3] = {&a, &b, &c};",
              "    cout << *arr[*arr[1] - 0];",
              "    return 0;",
              "}"
            ],
            "options": ["15", "18", "garbage value", "compile time error"],
            "answer": "compile time error",
            "explanation": "In this code, an array 'arr' of type int is defined, but it is initialized with pointers to integers (i.e., &a, &b, and &c). The expression '*arr[*arr[1] - 0]' attempts to dereference these pointers and perform arithmetic operations on them. This is not valid in C++ and will result in a compile-time error because it's trying to mix integer and pointer arithmetic."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "void fun(int x, int y){",
              "    x = 20;",
              "    y = 10;",
              "}",
              "int main() {",
              "    int x = 10;",
              "    fun (x, x);",
              "    cout << x;",
              "    return 0;",
              "}"
            ],
            "options": ["10", "20", "compile time error", "30"],
            "answer": "10",
            "explanation": "In this program, the function 'fun' is called with two arguments, 'x' and 'x'. These arguments are passed by value, which means that the function receives copies of 'x' and 'x' and operates on these copies. The changes made to 'x' and 'y' inside the 'fun' function do not affect the original variables in the 'main' function. Therefore, the output of 'cout << x;' in 'main' is 10."
          },
          {
            "question": "What is the scope of the variable declared in the user-defined function?",
            "options": [
              "whole program",
              "only inside the {} block",
              "the main function",
              "header section"
            ],
            "answer": "only inside the {} block",
            "explanation": "The scope of a variable declared within a user-defined function is limited to the block enclosed by curly braces '{}' where it is declared. This means the variable is only accessible and valid within the function's block and not outside of it."
          },
          {
            "question": "What is the name of | operator?",
            "options": ["sizeof", "or", "and", "modulus"],
            "answer": "or",
            "explanation": "The '|' operator in C++ is known as the 'or' operator, and it is used to perform a bitwise OR operation on the binary representations of two values."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "int main() {",
              "    int a;",
              "    a = 5 + 3 * 5;",
              "    cout << \"a: \" << a;",
              "    return 0;",
              "}"
            ],
            "options": ["35", "20", "25", "30"],
            "answer": "20",
            "explanation": "In this C++ code, the expression '5 + 3 * 5' is evaluated using operator precedence. The multiplication operator '*' has a higher precedence than the addition operator '+', so '3 * 5' is computed first, resulting in 15. Then, '5 + 15' is computed, giving the final value of 'a' as 20. Therefore, the output is 'a: 20'."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "int main() {",
              "    int a = 20, b = 10, c = 15, d = 5;",
              "    int e;",
              "    e = a + b * c / d;",
              "    cout << e << endl;",
              "    return 0;",
              "}"
            ],
            "options": ["50", "60", "70", "90"],
            "answer": "60",
            "explanation": "In this C++ code, the expression 'a + b * c / d' is evaluated using operator precedence. The multiplication operator '*' and division operator '/' have higher precedence than the addition operator '+'. So, 'b * c / d' is computed first, resulting in '10 * 15 / 5' which equals 30. Then, 'a + 30' is computed, giving the final value of 'e' as 60. Therefore, the output is '60'."
          },
          {
            "question": "Which of the following explains Polymorphism?",
            "options": [
              "int func(int, int); float func1(float, float);",
              "int func(int); int func(int);",
              "int func(float); float func(int, int, char);",
              "int func(); int new_func();"
            ],
            "answer": "int func(float); float func(int, int, char);",
            "explanation": "Polymorphism involves overriding the same function by changing the types or number of arguments. In the given options, the function names are the same, but in option 'int func(float); float func(int, int, char);', the types and number of parameters are different, which illustrates polymorphism."
          }
        ]
      },
      "PHP": {
        "questions": [
          {
            "question": "What will be the output of the following program?",
            "code": [
              "<?php",
              "echo strtr(\"Walcoma to the juvuTpoint.com\", \"au\", \"ea\");",
              "?>"
            ],
            "options": [
              "Welcome to the javaTpoint.com",
              "Wulcomu to tha juvuTpoint.com",
              "Walcoma to the jeveTpoint.com",
              "None of the above"
            ],
            "answer": "Welcome to the javaTpoint.com",
            "explanation": "The strtr() is an in-built function of PHP, which is used to replace a substring inside the other string. It provides the facility to change the particular word in a string. The strtr() function translates characters or replaces the substrings. It is a case-sensitive function."
          },
          {
            "question": "Output of the following code is",
            "code": [
              "<?php",
              "$On_e = 1;",
              "$tw_o = 2;",
              "$thre_e = 3;",
              "$fou_r = 4;",
              "echo \"$on_e / $tw_o + $thre_e / $fou_r\";",
              "?>"
            ],
            "options": ["0.125", "0.25", "0.26", "0.75"],
            "answer": "0.26",
            "explanation": "The code evaluates the expression $on_e / $tw_o + $thre_e / $fou_r, which simplifies to 1 / 2 + 3 / 4. When you perform these operations, the result is 0.26."
          },
          {
            "question": "Find out the output",
            "code": [
              "<?php",
              "$foo = 'Bob';",
              "$bar = &$foo;",
              "$bar = \"My name is $bar\";",
              "echo $bar;",
              "echo $foo;",
              "?>"
            ],
            "options": [
              "Bob",
              "My name is Bob",
              "My name is BobMy name is Bob",
              "My name is"
            ],
            "answer": "My name is BobMy name is Bob",
            "explanation": "In the code, $foo is assigned the value 'Bob,' and $bar is assigned a reference to $foo. When $bar is updated with \"My name is $bar,\" it modifies $foo as well since $bar and $foo share the same reference. Therefore, both echo statements display the updated value, 'My name is Bob,' twice."
          },
          {
            "question": "If $a = 12, what will be returned when ($a == 12) ? 5 : 1 is executed?",
            "options": ["1", "5", "12", "Error"],
            "answer": "5",
            "explanation": "The ?: operator is known as the ternary operator in PHP. If the condition in the parentheses is true, then the value just after the ? is returned; otherwise, the value after the : is returned. In this case, since $a is equal to 12, the condition ($a == 12) is true, so 5 is returned."
          },
          {
            "question": "What will be the output of the following PHP program?",
            "code": [
              "<?php",
              "$php = array(\"Array\", \"Function\", \"Strings\", \"File\");",
              "echo pos($php);",
              "?>"
            ],
            "options": ["Function", "File", "Strings", "Array"],
            "answer": "Array",
            "explanation": "The `pos()` function returns the value of the current element in an array. Since no operation has been done on the array, the current element is the first one, which is 'Array'. Therefore, 'Array' will be the output."
          },
          {
            "question": "Which of the following function is used to get the length of a string?",
            "options": ["size()", "strlen()", "length", "None of the above"],
            "answer": "strlen()",
            "explanation": "The strlen() function is used to find the length of a string."
          },
          {
            "question": "Which of the following is used to access session variables in PHP?",
            "options": [
              "session_start() function",
              "$_SESSION[]",
              "isset() function",
              "session_destroy() function"
            ],
            "answer": "$_SESSION[]",
            "explanation": "Session variables are stored in an associative array called $_SESSION[]. These variables can be accessed during the lifetime of a session."
          },
          {
            "question": "Which of the following method returns the current date and time?",
            "options": ["time()", "getdate()", "date()", "None of the above"],
            "answer": "time()",
            "explanation": "PHP's time() function gives you all the information you need about the current date and time. It requires no arguments but returns an integer."
          },
          {
            "question": "If we filter many variables into one then which of the following filter is used?",
            "options": [
              "filter_var_array()",
              "filter_var()",
              "filter_input",
              "filter_input_array"
            ],
            "answer": "filter_var_array()",
            "explanation": "The filter_var_array() function is used to filter multiple variables using the same filter settings."
          },
          {
            "question": "Which of the below methods is used to send the given data using URL?",
            "options": ["Post", "Send", "Get", "Both A and D"],
            "answer": "Get",
            "explanation": "The 'Get' method is used to send data using the URL by appending it as query parameters."
          },
          {
            "question": "What is the primary difference between the 'GET' and 'POST' methods in HTTP?",
            "options": [
              "The 'GET' method is used for retrieving data from the server, while the 'POST' method is used for sending data to the server.",
              "The 'GET' method is more secure than the 'POST' method.",
              "The 'POST' method is used exclusively for downloading files, while the 'GET' method is used for all other types of requests.",
              "There is no significant difference between the 'GET' and 'POST' methods in HTTP."
            ],
            "answer": "The 'GET' method is used for retrieving data from the server, while the 'POST' method is used for sending data to the server.",
            "explanation": "In HTTP, the 'GET' method is used to request data from a specified resource, and it should only retrieve data without causing any side-effects on the server. On the other hand, the 'POST' method is used to submit data to be processed to a specified resource, often resulting in a change in server state."
          },
          {
            "question": "What is PHP Mailer commonly used for in web development?",
            "options": [
              "Handling database connections",
              "Creating dynamic web pages",
              "Sending emails from a web server",
              "Styling web pages with CSS"
            ],
            "answer": "Sending emails from a web server",
            "explanation": "PHP Mailer is a popular library used for sending emails from a web server using PHP. It provides a convenient and feature-rich way to send email messages, including text and HTML emails, with attachments and custom configurations."
          },
          {
            "question": "What is the primary function of the `json_encode` function in PHP?",
            "options": [
              "Decoding JSON data into a PHP array",
              "Creating a JSON string from a PHP array",
              "Parsing XML data",
              "Encrypting data"
            ],
            "answer": "Creating a JSON string from a PHP array",
            "explanation": "The `json_encode` function in PHP is used to convert a PHP array into a JSON-encoded string. This makes it easier to transmit data in a format that can be understood by other applications or services that consume JSON data."
          }
        ]
      }
    },
    "Advanced": {
      "Python": {
        "questions": [
          {
            "question": "Which of the following is correct?",
            "code": [
              "class A:",
              "    def __init__(self, name):",
              "        self.name = name"
            ],
            "options": [
              "id(a1) and id(a2) will have the same value.",
              "id(a1) and id(a2) will have different values.",
              "Two objects with the same value of the attribute cannot be created.",
              "None of the above"
            ],
            "answer": "id(a1) and id(a2) will have different values.",
            "explanation": "Although both a1 and a2 have the same value of attributes, but these two point to two different objects. Hence, their id will be different."
          },
          {
            "question": "In python, what is method inside class?",
            "options": ["attribute", "object", "argument", "function"],
            "answer": "function",
            "explanation": "In OOP of Python, a function defined inside a class is referred to as a 'method'."
          },
          {
            "question": "What will be the output of the below Python code?",
            "code": [
              "class A:",
              "    def __init__(self, num):",
              "        num = 3",
              "        self.num = num",
              "    def change(self):",
              "        self.num = 7",
              "a = A(5)",
              "print(a.num)",
              "a.change()",
              "print(a.num)"
            ],
            "options": ["5\n   7", "5\n   5", "3\n   3", "3\n   7"],
            "answer": "3\n   7",
            "explanation": "Inside the constructor (__init__), self.num is set to 3 initially. The first print statement prints 3. When the method change() is invoked, self.num is changed to 7, so the second print statement prints 7."
          },
          {
            "question": "What will be the output for the following code?",
            "code": [
              "class A:",
              "    def __init__(self, x=1):",
              "        self.x = x",
              "class der(A):",
              "    def __init__(self, y=2):",
              "        super().__init__()",
              "        self.y = y",
              "def main():",
              "    obj = der()",
              "    print(obj.x, obj.y)",
              "main()"
            ],
            "options": [
              "Error, the syntax of the invoking method is wrong",
              "The program runs fine but nothing is printed",
              "1 0",
              "1 2"
            ],
            "answer": "1 2",
            "explanation": "The code defines two classes, A and der, where der is a subclass of A. Both classes have constructors (__init__) that initialize instance variables x and y, respectively. In the main function, an object of the der class is created. When printing obj.x and obj.y, it outputs '1 2' because der's constructor initializes y to 2, and it also calls the parent class A's constructor, which initializes x to 1."
          },
          {
            "question": "Which of the following statements is false?",
            "options": [
              "A non-private method in a superclass can be overridden",
              "A derived class is a subset of superclass",
              "The value of a private variable in the superclass can be changed in the subclass",
              "When invoking the constructor from a subclass, the constructor of superclass is automatically invoked"
            ],
            "answer": "The value of a private variable in the superclass can be changed in the subclass",
            "explanation": "The third statement is false. In object-oriented programming, private variables in a superclass are not accessible directly in the subclass, so their values cannot be changed directly in the subclass. The concept of encapsulation prevents direct access to private variables from outside the class."
          },
          {
            "question": "What will be the output of the following Python code?",
            "code": [
              "tuple1 = (2, 4, 3)",
              "tuple3 = tuple1 * 2",
              "print(tuple3)"
            ],
            "options": [
              "(4, 8, 6)",
              "(2, 4, 3, 2, 4, 3)",
              "(2, 2, 4, 4, 3, 3)",
              "Error"
            ],
            "answer": "(2, 4, 3, 2, 4, 3)",
            "explanation": "The code duplicates the tuple1 by multiplying it by 2, resulting in (2, 4, 3, 2, 4, 3)."
          },
          {
            "question": "What will be the output of the following Python code?",
            "code": ["list1 = [8, 0, 9, 5]", "print(list1[::-1])"],
            "options": [
              "[5, 9, 0, 8]",
              "[8, 0, 9]",
              "[8, 0, 9, 5]",
              "[0, 9, 5]"
            ],
            "answer": "[5, 9, 0, 8]",
            "explanation": "The code reverses the list1 using slicing with [::-1], resulting in [5, 9, 0, 8]."
          },
          {
            "question": "The marks of a student on 6 subjects are stored in a list, list1=[80,66,94,87,99,95]. How can the student's average mark be calculated?",
            "options": [
              "print(avg(list1))",
              "print(sum(list1)/len(list1))",
              "print(sum(list1)/sizeof(list1))",
              "print(total(list1)/len(list1))"
            ],
            "answer": "print(sum(list1)/len(list1))",
            "explanation": "The student's average mark can be calculated by summing the marks in the list and dividing by the number of subjects, which is len(list1). So, the correct calculation is print(sum(list1)/len(list1))."
          },
          {
            "question": "What will be the output of the following Python code?",
            "code": [
              "list1=[1,3,5,2,4,6,2]",
              "list1.remove(2)",
              "print(sum(list1))"
            ],
            "options": ["18", "19", "21", "22"],
            "answer": "21",
            "explanation": "After removing the first occurrence of the value 2 from the list, the modified list becomes [1, 3, 5, 4, 6, 2], and the sum of these numbers is 21. Therefore, the output is 21."
          },
          {
            "question": "What will the above Python code do?",
            "code": [
              "dict = {'Phy': 94, 'Che': 70, 'Bio': 82, 'Eng': 95}",
              "dict.update({'Che': 72, 'Bio': 80})"
            ],
            "options": [
              "It will create a new dictionary as dict={'Che':72,'Bio':80} and the old dict will be deleted.",
              "It will throw an error as a dictionary cannot be updated.",
              "It will simply update the dictionary as dict={'Phy':94,'Che':72,'Bio':80,'Eng':95}.",
              "It will not throw any error but it will not make any changes in dict."
            ],
            "answer": "It will simply update the dictionary as dict={'Phy':94,'Che':72,'Bio':80,'Eng':95}.",
            "explanation": "The code updates the values of the 'Che' and 'Bio' keys in the dictionary, so the resulting dictionary is {'Phy': 94, 'Che': 72, 'Bio': 80, 'Eng': 95}. Therefore, option C is correct."
          },
          {
            "question": "What will be the result of the above Python code?",
            "code": [
              "dict = {'Joey': 1, 'Rachel': 2}",
              "dict.update({'Phoebe': 2})",
              "print(dict)"
            ],
            "options": [
              "{'Joey': 1, 'Rachel': 2, 'Phoebe': 2}",
              "{'Joey': 1, 'Rachel': 2}",
              "{'Joey': 1, 'Phoebe': 2}",
              "Error"
            ],
            "answer": "{'Joey': 1, 'Rachel': 2, 'Phoebe': 2}",
            "explanation": "The code updates the dictionary by adding the 'Phoebe' key with a value of 2. So, the resulting dictionary is {'Joey': 1, 'Rachel': 2, 'Phoebe': 2}. Therefore, option A is correct."
          },
          {
            "question": "What will be the output of the following Python code?",
            "code": [
              "set1 = {2, 5, 3}",
              "set2 = {3, 1}",
              "set3 = {}",
              "set3 = set1 & set2",
              "print(set3)"
            ],
            "options": ["{3}", "{}", "{2, 5, 3, 1}", "{2, 5, 1}"],
            "answer": "{3}",
            "explanation": "The code performs a set intersection between set1 and set2 using the '&' operator. The result is a new set containing the common element, which is {3}. Therefore, option A is correct."
          },
          {
            "question": "What will set1|set2 do?",
            "code": ["If set1={\"a\",\"b\",3}", "set2={3,7}"],
            "options": [
              "Elements of set2 will get appended to set1",
              "Elements of set1 will get appended to set2",
              "A new set will be created with the elements of both set1 and set2",
              "A new set will be created with the unique elements of set1 and set2."
            ],
            "answer": "A new set will be created with the elements of both set1 and set2",
            "explanation": "The '|' operator performs a union operation on sets. It creates a new set that contains all the unique elements from both set1 and set2. Therefore, option C is correct."
          },
          {
            "question": "What will be the output of given Python code?",
            "code": [
              "str1=\"hello\"",
              "c=0",
              "for x in str1:",
              "   if(x!=\"l\"):",
              "       c=c+1",
              "   else:",
              "       pass",
              "print(c)"
            ],
            "options": ["2", "0", "4", "3"],
            "answer": "3",
            "explanation": "The given Python code counts the number of characters in the string 'hello' that are not 'l'. It initializes a count 'c' to 0 and iterates through each character in the string. If the character is not 'l', it increments 'c' by 1. The final value of 'c' is 3, so the output is 3, as given in option D."
          },
          {
            "question": "What will be the output of given Python code?",
            "code": [
              "str1=\"hello\"",
              "c=0",
              "for x in str1:",
              "   if(x!=\"l\"):",
              "       c=c+1",
              "   else:",
              "       pass",
              "print(c)"
            ],
            "options": ["2", "0", "4", "3"],
            "answer": "3",
            "explanation": "The given Python code counts the number of characters in the string 'hello' that are not 'l'. It initializes a count 'c' to 0 and iterates through each character in the string. If the character is not 'l', it increments 'c' by 1. The final value of 'c' is 3, so the output is 3, as given in option D."
          },
          {
            "question": "What will the below Python code will return?",
            "code": [
              "If str1=\"save paper,save plants\"",
              "str1.find(\"save\")"
            ],
            "options": [
              "It returns the first index position of the first occurrence of \"save\" in the given string str1.",
              "It returns the last index position of the last occurrence of \"save\" in the given string str1.",
              "It returns the last index position of the first occurrence of \"save\" in the given string str1.",
              "It returns the first index position of the first occurrence of \"save\" in the given string str1."
            ],
            "answer": "It returns the first index position of the first occurrence of \"save\" in the given string str1.",
            "explanation": "It returns the first index position of the first occurrence of \"save\" in the given string str1."
          }
        ]
      },
      "JavaScript": {
        "questions": [
          {
            "question": "Based on the below options, which option is the JavaScript Library?",
            "options": ["React", "Vue.js", "Angular", "Ember.js"],
            "answer": "React",
            "explanation": "Vue.js, Angular, Ember.js are the JavaScript Framework. React is the JavaScript Library based on the options."
          },
          {
            "question": "Predict the result",
            "code": [
              "var bar = 1,",
              "fun = {};",
              "fun: {",
              "  bar: 2;",
              "  x: ++bar;",
              "};",
              "fun.x + fun.bar + bar;"
            ],
            "options": ["undefined", "4", "5", "NaN"],
            "answer": "NaN",
            "explanation": "The value of fun.bar is undefined, so adding it to any numeric value results in NaN (Not-a-Number)."
          },
          {
            "question": "Which one of the given options can be considered as the correct output of the following code?",
            "code": [
              "var addition=newFunction(\"number1\",\"number2\",\"return number1+number2\");",
              "document.writeln(addition(10,5));"
            ],
            "options": ["12", "13", "15", "Error"],
            "answer": "15",
            "explanation": "The \"addition()\" function was defined in the first line of code using the \"new\" property. In the second line of code, the addition function is called along with two passed arguments as 10, 5 inside the \"document.write()\" method, which prints the sum of two passed arguments returned by the \"addition()\" method."
          },
          {
            "question": "What output will be returned by the function in the following code?",
            "code": [
              "var scope = 'global scope';",
              "function checkingscope() {",
              "  var scope = 'local scope';",
              "function f() {",
              "return scope;",
              "}",
              "return f",
              "}"
            ],
            "options": [
              "It will return the value in scope",
              "It will return null",
              "It will throw an exception",
              "It will show an error message"
            ],
            "answer": "It will return the value in scope",
            "explanation": "Each block of code, function, or script as a whole always has an object, associated with them, called a Lexical environment. Therefore, the JavaScript code given in the above question will return the value in scope."
          },
          {
            "question": "Which of the following is a server-side JavaScript object?",
            "options": ["Date", "File", "FileUpload", "Function"],
            "answer": "File",
            "explanation": "File  is a server-side JavaScript object"
          },
          {
            "question": "What will be the output of the following JavaScript code?",
            "code": [
              "var o =newF();  // statement 1",
              "o.constructor=== F // statement 2"
            ],
            "options": ["False", "1", "0", "True"],
            "answer": "True",
            "explanation": "A \"constructor\" is a function property of any class that is typically used for object of that class . In the above given code, both 1,2 statements are creating the instance of the class."
          },
          {
            "question": "What would be the output of the following Javascript code?",
            "code": [
              "var string1 = \"Fee\";",
              "var intvalue = 10000;",
              "alert( string1 + intvalue );"
            ],
            "options": ["Fee 10000", "10000", "Fee10000", "Exception"],
            "answer": "Fee10000",
            "explanation": "In JavaScript, when you concatenate a string and a number using the `+` operator, the number is implicitly converted to a string. So, the output will be 'Fee10000', as the string 'Fee' and the number 10000 are concatenated as strings."
          },
          {
            "question": "Which one of the given options can be considered as the correct output for the following JavaScript code?",
            "code": [
              "const obj1 = {",
              "    a: 10,",
              "    b: 15,",
              "    c: 18",
              "};",
              "const obj2 = Object.assign({c: 7, d: 1}, obj1);",
              "console.log(obj2.c, obj2.d);"
            ],
            "options": ["Undefined", "18, 1", "7, 1", "Error"],
            "answer": "7, 1",
            "explanation": "The `Object.assign()` method is used to copy the values and properties of one object to another. In this code, it copies the properties from `obj1` into the new object `obj2`. The value of `obj2.c` is 7, and the value of `obj2.d` is 1. Therefore, the correct output is '7, 1'."
          },
          {
            "question": "In the following code, what value should the variable 'a' contain?",
            "code": [
              "var x = counter(), y = counter();",
              "x.count()",
              "y.count()",
              "x.reset()",
              "x.count()",
              "y.count()"
            ],
            "options": ["Null", "0", "2", "Undefined"],
            "answer": "2",
            "explanation": "The 'counter()' method increments the value of the variable by one each time it is called. The 'reset()' function resets the value of that variable to zero. In this code, 'counter()' is called two times for variable 'y', and 'reset()' is not called for 'x'. So, the value of variable 'y' is 2."
          },
          {
            "question": "What will be the correct output of the following JavaScript code?",
            "code": [
              "<p id='demo'></p>",
              "<script>",
              "function myFunc() {",
              "  document.getElementById('demo').innerHTML = Math.asinh(1);",
              "}",
              "</script>"
            ],
            "options": ["0.80", "0.78", "0.50", "0.88"],
            "answer": "0.88",
            "explanation": "The JavaScript code defines a function 'myFunc' that sets the innerHTML of the 'demo' element to the result of Math.asinh(1). The Math.asinh() function returns the inverse hyperbolic sine of a number. In this case, it computes asinh(1), which is approximately 0.88."
          },
          {
            "question": "Which one of the following options is the correct output for the given code of JavaScript?",
            "code": [
              "function fun() {",
              "  var a = 1;",
              "  var b = 2;",
              "  return a * b;",
              "}",
              "document.write(fun());"
            ],
            "options": ["2", "3", "0", "Error"],
            "answer": "2",
            "explanation": "The JavaScript function 'fun' calculates the product of two numbers, 1 and 2, and returns the result. The 'document.write' statement then displays the result in the document. In this case, it will write '2' to the document as the output."
          },
          {
            "question": "What will be the output of the following given code of JavaScript?",
            "code": [
              "var x1 = [,,,];",
              "var x2 = new Array(10);",
              "0 in x1",
              "0 in x2"
            ],
            "options": ["true true", "false true", "false false", "true false"],
            "answer": "true false",
            "explanation": "In the code, two arrays, x1 and x2, are defined. x1 is defined with empty slots (null values), while x2 is defined with a length of 10 but no specific values. The '0 in x1' expression returns true because even though x1 has empty slots, it still has an index 0. However, '0 in x2' returns false because x2 is an empty array with no values defined at index 0."
          },
          {
            "question": "What will happen if we execute the following piece of code?",
            "code": [
              "<script>",
              "var arr = [4, 3, , 1];",
              "for (i = 0; i < 4; i++) {",
              "  document.writeln(arr[i]);",
              "}",
              "</script>"
            ],
            "options": [
              "The output will be 4 3 1",
              "The output will be 4 3 undefined 1",
              "It will result in an error",
              "It does not run at all"
            ],
            "answer": "The output will be 4 3 undefined 1",
            "explanation": "The code defines an array 'arr' with four elements, but the third element is left empty (undefined). When the code is executed, it uses a loop to iterate through the array and print each element. As a result, it will output '4 3 undefined 1' because the empty slot in the array is represented as 'undefined'."
          },
          {
            "question": "For which purpose is the array 'map()' method used?",
            "options": [
              "It is used for mapping the elements of another array into itself.",
              "It passes each data-item of the array and returns the necessary mapped elements.",
              "It passes the data-items of an array into another array.",
              "It passes every element of the array on which it is invoked to the function you specify and returns an array containing the values returned by that function."
            ],
            "answer": "It passes every element of the array on which it is invoked to the function you specify and returns an array containing the values returned by that function.",
            "explanation": "The \"map()\" method is one of the built-in methods of the JavaScript that is used for mapping the data-items of the array, which can be used later for some other purpose. It passes every element of the array on which it is invoked to the function we specify, and returns an array containing the values returned by that function."
          },
          {
            "question": "What is the primary purpose of the 'useParams' hook in React, especially when used in the context of React Router?",
            "options": [
              "To update the state of a component.",
              "To access and retrieve URL parameters in a React component.",
              "To define and manage global state variables.",
              "To perform AJAX requests."
            ],
            "answer": "To access and retrieve URL parameters in a React component.",
            "explanation": "The 'useParams' hook in React is primarily used to access and retrieve URL parameters, allowing you to extract dynamic values from the URL and use them within your React components when working with React Router. This is useful for building dynamic and parameterized routes in your web application."
          }
        ]
      },
      "Java": {
        "questions": [
          {
            "question": "What will be the output of the following Java code?",
            "code": [
              "import java.util.Hashtable;",
              "public class HashTableClass {",
              "  int hashcode;",
              "  HashTableClass(int hashcode) {",
              "    this.hashcode = hashcode;",
              "  }",
              "  public int hashCode() {",
              "    return hashcode;",
              "  }",
              "  public String toString() {",
              "    return hashcode + \" \";",
              "  }",
              "  public static void main(String[] args) {",
              "    Hashtable ht = new Hashtable();",
              "    ht.put(new HashTableClass(10), \"Java\");",
              "    ht.put(new HashTableClass(3), \"C\");",
              "    ht.put(new HashTableClass(4), \"C++\");",
              "    ht.put(new HashTableClass(5), \"Ruby\");",
              "    ht.put(new HashTableClass(6), \"null\");",
              "    System.out.println(ht);",
              "  }",
              "}"
            ],
            "options": [
              "{10 =Java, 3 =C, 4 =C++, 6 =null, 5 =Ruby}",
              "{10 =Java, 6 =null, 5 =Ruby, 4 =C++, 3 =C}",
              "{3 =C, 4 =C++, 5 =Ruby, 6 =null, 10 =Java}",
              "None of these"
            ],
            "answer": "{10 =Java, 6 =null, 5 =Ruby, 4 =C++, 3 =C}",
            "explanation": "The output of the code is a Hashtable in the form of `{key = value}` pairs. However, the order of elements in a Hashtable is not guaranteed to be in the same order as they were inserted. Hashtable uses the hash code of the keys to store and retrieve values efficiently, and the order can be different from the insertion order. In this case, the order of elements in the Hashtable may vary, so options A and C can be ruled out. Option D ('None of these') is not correct because there is a valid output among the given options. Therefore, the correct answer is option B."
          },
          {
            "question": "Which Java method is used to clear elements of an ArrayList?",
            "options": ["deleteAll()", "delete()", "clearAll()", "clear()"],
            "answer": "clear()",
            "explanation": "The clear() method of ArrayList in Java is used to remove all the elements from a list."
          },
          {
            "question": "Which of the following code segment would execute the stored procedure 'getPassword()' located in a database server?",
            "options": [
              "CallableStatement cs = connection.prepareCall('{call.getPassword()}');\ncs.executeQuery();",
              "CallabledStatement callable = conn.prepareCall('{call getPassword()}');\ncallable.executeUpdate();",
              "CallableStatement cab = con.prepareCall('{call getPassword()}');\ncab.executeQuery();",
              "Callablestatement cstate = connect.prepareCall('{call getpassword()}');\ncstate.executeQuery();"
            ],
            "answer": "CallableStatement cab = con.prepareCall('{call getPassword()}');\ncab.executeQuery();",
            "explanation": "In Java, java.sql.CallableStatement interface is used to call the SQL stored procedures in the database. The stored procedures are similar to functions as they perform some specific tasks, except that they are only available in the database. The CallableStatement can return either a single ResultSet object or multiple ResultSet objects."
          },
          {
            "question": "'this' keyword in Java is ___.",
            "options": [
              "Used to hold the reference of the current object",
              "Holds object value",
              "Used to create a new instance",
              "All of these"
            ],
            "answer": "Used to hold the reference of the current object",
            "explanation": "Java 'this' keyword is used to hold the reference of the current object."
          },
          {
            "question": "What will be the output of the following Java code?",
            "code": [
              "import java.util.Scanner;",
              "",
              "class ThisKeyword {",
              "  private int a = 4;",
              "  private int b = 1;",
              "",
              "  void getSum(int a, int b) {",
              "    this.a = a;",
              "    this.b = b;",
              "    System.out.println(this.a + this.b);",
              "  }",
              "}",
              "",
              "public class Main {",
              "  public static void main(String args[]) {",
              "    ThisKeyword T = new ThisKeyword();",
              "    T.getSum(3, 5);",
              "  }",
              "}"
            ],
            "options": ["5", "9", "8", "4"],
            "answer": "8",
            "explanation": "The above Java program is an example to demonstrate the use of the 'this' keyword. When the getSum method is called with arguments 3 and 5, it sets the private fields 'a' and 'b' of the current object to 3 and 5, respectively. Then, it prints the sum of 'this.a' and 'this.b,' which is 8."
          },
          {
            "question": "What is the output of the following Java program?",
            "code": [
              "class One{",
              "    public One(){",
              "        System.out.print(\"One,\");",
              "    }",
              "}",
              "class Two extends One{",
              "    public Two(){",
              "        System.out.print(\"Two,\");",
              "    }",
              "}",
              "class Three extends Two{",
              "    public Three(){",
              "        System.out.print(\"Three\");",
              "    }",
              "}",
              "",
              "public class Test{",
              "    public static void main(String[] args){",
              "        Three three = new Three();",
              "    }",
              "}"
            ],
            "options": ["Three", "One", "One,Two,Three", "Run-time error"],
            "answer": "One,Two,Three",
            "explanation": "The output of the given Java program is 'c) One,Two,Three'. When an object of the 'Three' class is created in the 'main' method, it invokes the constructors of its superclasses in the order of inheritance. First, the constructor of 'One' is called, which prints 'One,'. Then, the constructor of 'Two' (the subclass of 'One') is called, which prints 'Two,'. Finally, the constructor of 'Three' (the subclass of 'Two') is called, which prints 'Three'."
          },
          {
            "question": "What is the output of the following Java program?",
            "code": [
              "abstract class Car {",
              "    static {",
              "        System.out.print(\"1\");",
              "    }",
              "",
              "    public Car(String name) {",
              "        super();",
              "        System.out.print(\"2\");",
              "    }",
              "",
              "    {",
              "        System.out.print(\"3\");",
              "    }",
              "}",
              "",
              "public class BlueCar extends Car {",
              "    {",
              "        System.out.print(\"4\");",
              "    }",
              "",
              "    public BlueCar() {",
              "        super(\"blue\");",
              "        System.out.print(\"5\");",
              "    }",
              "",
              "    public static void main(String[] gears) {",
              "        new BlueCar();",
              "    }",
              "}"
            ],
            "options": [
              "23451",
              "12354",
              "13245",
              "The code does not compile."
            ],
            "answer": "13245",
            "explanation": "The class is loaded first, with the static initialization block called and '1' is outputted first. When the 'BlueCar' is created in the 'main()' method, the superclass initialization happens first. The instance initialization blocks are executed before the constructor, so '32' is outputted next.\n\nFinally, the class is loaded with the instance initialization blocks again being called before the constructor, outputting '45'. The result is that '13245' is printed, making Option C the correct answer."
          },
          {
            "question": "What is the output of the following Java program?",
            "code": [
              "class Math {",
              "    public final double secret = 2;",
              "}",
              "",
              "class ComplexMath extends Math {",
              "    public final double secret = 4;",
              "}",
              "",
              "public class InfiniteMath extends ComplexMath {",
              "    public final double secret = 8;",
              "",
              "    public static void main(String[] numbers) {",
              "        Math math = new InfiniteMath();",
              "        System.out.print(math.secret);",
              "    }",
              "}"
            ],
            "options": ["2", "4", "8", "The code does not compile."],
            "answer": "2",
            "explanation": "The code compiles without issue, so Option D is incorrect. Java allows methods to be overridden, but not variables. Therefore, marking them final does not prevent them from being reimplemented in a subclass. Furthermore, polymorphism does not apply in the same way it would to methods as it does to variables. In particular, the reference type determines the version of the secret variable that is selected, making Output 2 and Option A the correct answer."
          },
          {
            "question": "What will be the output of this program?",
            "code": [
              "class Color {",
              "    int red, green, blue;",
              "",
              "    void Color() {",
              "        red = 10;",
              "        green = 10;",
              "        blue = 10;",
              "    }",
              "",
              "    void printColor() {",
              "        System.out.println(\"red: \" + red + \" green: \" + green + \" blue: \" + blue);",
              "    }",
              "}",
              "",
              "public class Test {",
              "    public static void main(String[] args) {",
              "        Color color = new Color();",
              "        color.printColor();",
              "    }",
              "}"
            ],
            "options": [
              "Compiler error: no constructor provided for the class.",
              "Compiles without errors, and when run, it prints the following: red: 0 green: 0 blue: 0.",
              "Compiles without errors, and when run, it prints the following: red: 10 green: 10 blue: 10.",
              "Compiles without errors, and when run, crashes by throwing NullPointerException."
            ],
            "answer": "Compiles without errors, and when run, it prints the following: red: 0 green: 0 blue: 0.",
            "explanation": "In Java, a method with the same name as the class is not treated as a constructor. In the given program, the `Color` class has a method named `Color()`, but it is not a constructor. Therefore, when an instance of `Color` is created using `new Color()`, the default constructor is invoked, which initializes integer fields to their default values, which is 0. As a result, it prints 'red: 0 green: 0 blue: 0' when run."
          },
          {
            "question": "Look at the following code and choose the right option for the word:",
            "code": [
              "// Shape.java",
              "public class Shape {",
              "    protected void display() {",
              "        System.out.println(\"Display-base\");",
              "    }",
              "}",
              "// Circle.java",
              "public class Circle extends Shape {",
              "    <access-modifier> void display() {",
              "        System.out.println(\"Display-derived\");",
              "    }",
              "}"
            ],
            "options": [
              "Only protected can be used.",
              "public and protected both can be used.",
              "public, protected, and private can be used.",
              "Only public can be used."
            ],
            "answer": "public and protected both can be used.",
            "explanation": "In Java, when a subclass overrides a method from its superclass, the access modifier for the overridden method can be the same or less restrictive. In this case, the `display` method in the `Circle` class is overriding the `display` method from the `Shape` class. Since the `display` method in the `Shape` class is declared as `protected`, the overriding method in the `Circle` class can have an access modifier of `protected` or `public`. Therefore, both `public` and `protected` can be used as access modifiers for the `display` method in the `Circle` class."
          },
          {
            "question": "What is the output of the following program?",
            "code": [
              "public class Test {",
              "    public static void main(String[] args) {",
              "        String s1 = \"hello\";",
              "        String s2 = new String(\"hello\");",
              "        s2 = s2.intern();",
              "        System.out.println(s1 == s2);",
              "    }",
              "}"
            ],
            "options": ["false", "true", "None"],
            "answer": "true",
            "explanation": "We know that the intern() method will return the String object reference from the string pool since we assign it back to s2 and now both s1 and s2 are having the same reference. It means that s1 and s2 references pointing to the same object."
          },
          {
            "question": "What is the output of the following Java program?",
            "code": [
              "class Demo{",
              "    public Demo(int i){",
              "        System.out.println(\"int\");",
              "    }",
              "    public void Demo(short s){",
              "        System.out.println(\"short\");",
              "    }",
              "}",
              "public class Test{",
              "    public static void main(String[] args){",
              "        short s = 10;",
              "        Demo demo = new Demo(s);",
              "    }",
              "}"
            ],
            "options": ["int", "short", "Compile-time error", "Run-time error"],
            "answer": "int",
            "explanation": "The class Demo has one constructor i.e. with int argument. The short value is automatically promoted to an int value during object creation so the constructor with the int argument will be called and it will print “int”."
          },
          {
            "question": "What is the output of the following Java program?",
            "code": [
              "class Parent{",
              "    public void className(){",
              "        System.out.println(\"Parent\");",
              "    }",
              "}",
              "class Child extends Parent{",
              "    void className(){",
              "        System.out.println(\"Child\");",
              "    }",
              "}",
              "public class Test{",
              "    public static void main(String[] args){",
              "        Parent parent = new Child();",
              "        parent.className();",
              "    }",
              "}"
            ],
            "options": [
              "Parent",
              "Child",
              "Compile-time error",
              "Run-time error"
            ],
            "answer": "Compile-time error",
            "explanation": "The code will not compile because in Java, when you override a method in a subclass, the access modifier of the overriding method should not be more restrictive than the overridden method. In this case, the `className` method in the `Child` class has default/package-private access, which is more restrictive than the `className` method in the `Parent` class, which is `public`. This leads to a compile-time error."
          },
          {
            "question": "Which polymorphism behavior do you see in the following class?",
            "code": [
              "class Paint {",
              "    // all methods have the same name",
              "    public void Color(int x) {",
              "    }",
              "",
              "    public void Color(int x, int y) {",
              "    }",
              "",
              "    public void Color(int x, int y, int z) {",
              "    }",
              "}"
            ],
            "options": [
              "Method overloading",
              "Constructor overloading",
              "Method overriding",
              "Run-time polymorphism"
            ],
            "answer": "Method overloading",
            "explanation": "Method with the same name with different numbers of arguments or the same number of arguments with different data types is method overloading in Java programming."
          },
          {
            "question": "Which one is the correct declaration for implementing two interfaces?",
            "options": [
              "class C implements A, B",
              "class C implements A, implements B",
              "class C implements A extends B"
            ],
            "answer": "class C implements A, B",
            "explanation": "To implement multiple interfaces in a Java class, you should use the 'implements' keyword followed by the interface names separated by commas. Therefore, 'class C implements A, B' is the correct declaration for implementing both interfaces A and B in class C."
          },
          {
            "question": "What is wrong with the below source code?",
            "code": [
              "interface IShape {",
              "    void f1();",
              "    void f2();",
              "    void f3();",
              "}",
              "",
              "class Circle implements IShape {",
              "    public void f1() {",
              "    }",
              "}"
            ],
            "options": [
              "Compile-time error",
              "Run-time error",
              "Source code is OK"
            ],
            "answer": "Compile-time error",
            "explanation": "There is a compile-time error in the code because the 'Circle' class implements the 'IShape' interface but has not provided implementations for all the methods declared in the 'IShape' interface. In Java, when a class implements an interface, it must provide concrete implementations for all the methods declared in that interface. Since 'Circle' has not implemented 'f2()' and 'f3()' methods from the 'IShape' interface, it results in a compile-time error."
          },
          {
            "question": "In the below Java code, whose 'Car' method will be called?",
            "code": [
              "class Father {",
              "    public void car() {",
              "        System.out.println(\"Father's Car\");",
              "    }",
              "}",
              "",
              "class Son extends Father {",
              "    public void car() {",
              "        System.out.println(\"Son's Car\");",
              "    }",
              "}",
              "",
              "public class Sample {",
              "    public static void main(String[] args) {",
              "        Son john = new Son();",
              "        john.car();",
              "    }",
              "}"
            ],
            "options": [
              "Father’s Car",
              "Son’s Car",
              "There is an ambiguity, so no one Car",
              "Compiler Error"
            ],
            "answer": "Son’s Car",
            "explanation": "In this Java code, the 'Son' class extends the 'Father' class and overrides the 'car' method. When an object of the 'Son' class is created and its 'car' method is called, the overridden 'car' method in the 'Son' class will be invoked. This is an example of method overriding in Java, where the subclass provides its own implementation of a method defined in the superclass. If the 'Son' class did not contain the 'car' method, then the 'car' method from the 'Father' class would be called."
          }
        ]
      },
      "C++": {
        "questions": [
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "#include <string>",
              "using namespace std;",
              "int main() {",
              "    cout << rank <int [10]> :: value;",
              "    cout << rank <char [10] [10]> :: value;",
              "    cout << rank < string [10] [10] [10]> :: value;",
              "    return 0;",
              "}"
            ],
            "options": ["111", "123", "321", "121"],
            "answer": "123",
            "explanation": "In this program, the first array has a single dimension, the second one has two dimensions, and the third one has three dimensions. Therefore, the program prints 123."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "#include <string>",
              "using namespace std;",
              "int main() {",
              "    cout << is_array <int> :: value;",
              "    cout << is_array <char [10]> :: value;",
              "    cout << is_array <string]> :: value;",
              "    return 0;",
              "}"
            ],
            "options": ["010", "101", "001", "110"],
            "answer": "010",
            "explanation": "In this code, 'is_array' checks if the given type is an array or not. 'int' and 'string' are not of array type, so '0' is printed for them. 'char[10]' is an array of characters of size 10, so '1' is printed for it. Hence, the answer is '010'."
          },
          {
            "question": "Which of the following is correct about extent() function?",
            "options": [
              "Returns how many elements are in array currently",
              "Returns the size of the 1st dimension",
              "Returns how many total elements can be stored in an array",
              "Returns the size of a given dimension"
            ],
            "answer": "Returns the size of a given dimension",
            "explanation": "The 'extent()' function takes two parameters, one denoting the array and the other showing the dimension for which the size we want to know."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "#include <string>",
              "using namespace std;",
              "int main() {",
              "    cout << extent < string [10][20][30], 0> :: value;",
              "    cout << extent < string [10][20][30], 1> :: value;",
              "    cout << extent < string [10][20][30], 2> :: value;",
              "    return 0;",
              "}"
            ],
            "options": ["101010", "102030", "302010", "102010"],
            "answer": "102030",
            "explanation": "In the first 'cout', we are passing 0, and the size of the first dimension of the array is 10, so 10 is printed. In the following cases, we have passed 1 and 2; therefore, 20 and 30 are printed, respectively."
          },
          {
            "question": "Which of the following is correct about remove_all_extents() function?",
            "options": [
              "Removes all dimensions from an array",
              "Removes the first dimension from the left of the array",
              "Removes the first dimension from the right of the array",
              "Removes the last dimension from the left of the array"
            ],
            "answer": "Removes all dimensions from an array",
            "explanation": "As the name suggests, the 'remove_all_extents()' function removes all the dimensions from the array. So the rank of the array after this operation becomes 0."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "int main() {",
              "    int a = 5, b = 6, c, d;",
              "    c = a, b;",
              "    d = (a ,b);",
              "    cout << c << \" \" << d;",
              "    return 0;",
              "}"
            ],
            "options": ["5 6", "6 5", "6 7", "6 8"],
            "answer": "5 6",
            "explanation": "In this code, the comma operator ',' has a lower precedence than the assignment operator '='. Therefore, 'c = a, b;' is equivalent to 'c = a;' and 'b;' is a separate expression. In 'd = (a ,b);', the comma operator separates the expressions, but only the value of 'b' is assigned to 'd'. Hence, the output is '5 6'."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "int main() {",
              "    int i, j;",
              "    j = 10;",
              "    i = (j++, j + 100, 999 + j);",
              "    cout << i;",
              "    return 0;",
              "}"
            ],
            "options": ["1000", "11", "1010", "1001"],
            "answer": "1010",
            "explanation": "In this code, 'j' starts with the value 10. 'j' is then incremented to 11. Next, 'j + 100' is evaluated (but the result is not assigned to anything), and finally, '999 + j' is evaluated, which results in 1010. The value of 1010 is stored in 'i', so the output is '1010'."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "int main() {",
              "    int x, y;",
              "    x = 5;",
              "    y = ++x * ++x;",
              "    cout << x << y;",
              "    y = x++ * ++x;",
              "    cout << x << y;",
              "    return 0;",
              "}"
            ],
            "options": ["749735", "736749", "367497", "367597"],
            "answer": "749735",
            "explanation": "Due to the precedence of the pre-increment and post-increment operators, we get the output as '749735'."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "int main() {",
              "    int a = 10;",
              "    if (a = 15) {",
              "        time;",
              "        cout << a;",
              "        if (n == 3) goto time;",
              "    }",
              "    break;",
              "    return 0;",
              "}"
            ],
            "options": [
              "1010",
              "10",
              "infinitely print 10",
              "compile time error"
            ],
            "answer": "compile time error",
            "explanation": "There are several issues in this code. The assignment 'a = 15' inside the 'if' condition should use '==' for comparison. Also, 'time' and 'n' are undeclared variables, and 'break' is used outside of a loop or switch statement, which is a compilation error."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "int main() {",
              "    int n = 15;",
              "    for (; ;)",
              "        cout << n;",
              "    return 0;",
              "}"
            ],
            "options": [
              "error",
              "15",
              "infinite times of printing n",
              "none of the mentioned"
            ],
            "answer": "infinite times of printing n",
            "explanation": "In this code, there is no exit condition specified for the 'for' loop, so it will run indefinitely, printing the value of 'n' (which is 15) continuously until manually terminated."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "int main() {",
              "    int i = 3;",
              "    int l = i / -2;",
              "    int k = i % -2;",
              "    cout << l << k ;",
              "    return 0;",
              "}"
            ],
            "options": [
              "compile time error",
              "-1 1",
              "1 -1",
              "implementation defined"
            ],
            "answer": "-1 1",
            "explanation": "The sign of the result of the modulo operation on negative numbers is the sign of the dividend. So, 'l' is -1, and 'k' is 1."
          },
          {
            "question": "What will be the output of the following C++ code?",
            "code": [
              "#include <iostream>",
              "using namespace std;",
              "int main() {",
              "    int x = 8;",
              "    cout << \"ANDing integer 'x' with 'true' : \" << x && true;",
              "    return 0;",
              "}"
            ],
            "options": [
              "ANDing integer ‘x’ with ‘true’ :8",
              "ANDing integer ‘x’ with ‘true’ :0",
              "ANDing integer ‘x’ with ‘true’ :1",
              "ANDing integer ‘x’ with ‘true’ :9"
            ],
            "answer": "ANDing integer ‘x’ with ‘true’ :8",
            "explanation": "The && operator in C++ uses short-circuit evaluation. As 'x' (which is 8) is true (non-zero), it doesn't bother evaluating 'true', and the result of the expression is 8."
          },
          {
            "question": "0946, 786427373824, ‘x’ and 0X2f are _____ _____ ____ and _____ literals respectively.",
            "options": [
              "decimal, character, octal, hexadecimal",
              "octal, hexadecimal, character, decimal",
              "hexadecimal, octal, decimal, character",
              "octal, decimal, character, hexadecimal"
            ],
            "answer": "octal, decimal, character, hexadecimal",
            "explanation": "Literal integer constants that begin with 0x or 0X are interpreted as hexadecimal, and the ones that begin with 0 as octal. The character literals are written within single quotes."
          },
          {
            "question": "What is the value of the following 8-bit integer after all statements are executed?",
            "options": ["1", "-1", "127", "Implementation defined"],
            "answer": "Implementation defined",
            "explanation": "Right shift of signed integers is undefined and has implementation-defined behavior."
          },
          {
            "question": "Which of these expressions will make the rightmost set bit zero in an input integer x?",
            "options": [
              "x = x | (x-1)",
              "x = x & (x-1)",
              "x = x | (x+1)",
              "x = x & (x+2)"
            ],
            "answer": "x = x & (x-1)",
            "explanation": "If x is odd, the last bit will be 1, and the last bit of x-1 will become 0. If x is even, then the last bit of x will be 0, and the last bit of x-1 will become 1. In both cases, the AND operation of 1 and 0 will be 0, so the last bit of the final x will be 0."
          },
          {
            "question": "Which of these expressions will isolate the rightmost set bit?",
            "options": [
              "x = x & (~x)",
              "x = x ^ (~x)",
              "x = x & (-x)",
              "x = x ^ (-x)"
            ],
            "answer": "x = x & (-x)",
            "explanation": "The negative of a number is stored as 2's complement in C++. When you take the AND of x and (-x), the rightmost digit will be preserved, isolating the rightmost set bit."
          },
          {
            "question": "Which of the following is the correct difference between cin and scanf()?",
            "options": [
              "both are the same",
              "cin is a stream object whereas scanf() is a function",
              "scanf() is a stream object whereas cin is a function",
              "cin is used for printing whereas scanf() is used for reading input"
            ],
            "answer": "cin is a stream object whereas scanf() is a function",
            "explanation": "cin is a stream object available in C++ whereas scanf() is a function available in both C and C++. Both are used for reading input from users."
          },
          {
            "question": "Which of the following is an exit-controlled loop?",
            "options": ["for", "while", "do-while", "all of the mentioned"],
            "answer": "do-while",
            "explanation": "do-while is called an exit-controlled loop because in do-while, the termination condition is checked when we have executed the body of the loop, i.e., we are exiting the body and then checking the condition. Therefore, it is called an exit-controlled loop."
          }
        ]
      },
      "PHP": {
        "questions": [
          {
            "question": "How can you establish a connection to a MySQL database using PHP?",
            "options": [
              "Using the mysqli_query() function",
              "By including a connection string in the HTML file",
              "By setting up a WebSocket connection",
              "Using the mysqli_connect() function"
            ],
            "answer": "Using the mysqli_connect() function",
            "explanation": "To establish a connection to a MySQL database in PHP, you should use the mysqli_connect() function. This function allows you to specify the database server, username, password, and database name as parameters, and it returns a connection object that can be used for querying the database."
          },
          {
            "question": "How can you use AJAX with PHP to retrieve data from a server and display it on a web page?",
            "options": [
              "By embedding PHP code directly in the HTML file",
              "By using the PHP cURL library",
              "By sending an HTTP GET or POST request to a PHP script using JavaScript",
              "By including a PHP file as an iframe in the HTML"
            ],
            "answer": "By sending an HTTP GET or POST request to a PHP script using JavaScript",
            "explanation": "To use AJAX with PHP, you can send an HTTP GET or POST request to a PHP script using JavaScript. The PHP script processes the request, interacts with the server, and returns the data, which can then be displayed on the web page without requiring a full page reload."
          },
          {
            "question": "What will be the output of the following PHP code?",
            "code": [
              "<?php",
              "$four4 = 4;",
              "$three3 = 3;",
              "$two2 = 2;",
              "echo $four4 + $three3 / $two2 - 1;",
              "?>"
            ],
            "options": ["4.5", "7", "3.5", "Error"],
            "answer": "4.5",
            "explanation": "The code calculates the expression $four4 + $three3 / $two2 - 1, which simplifies to 4 + 1.5 - 1, resulting in 4.5 as the output."
          },
          {
            "question": "What will be the output of the following PHP code?",
            "code": [
              "<?php",
              "$color = \"red\";",
              "echo \"$color\";",
              "echo \"$COLOR\";",
              "echo \"$Color\";",
              "?>"
            ],
            "options": ["redredred", "redred", "red", "Error"],
            "answer": "red",
            "explanation": "In PHP, all variables are case-sensitive. Therefore, while the variable $color is defined and contains the value 'red,' the variables $COLOR and $Color are treated as different and not defined. As a result, only the value of $color is echoed, which is 'red.'"
          },
          {
            "question": "What will be the output of the following PHP code?",
            "code": [
              "<?php",
              "$car = \"Honda\";",
              "",
              "switch ($car) {",
              "    case \"Honda\":",
              "        echo \"You selected Honda.\";",
              "    case \"BMW\":",
              "        echo \"You selected BMW.\";",
              "    case \"AUDI\":",
              "        echo \"You selected Audi.\";",
              "    default:",
              "        echo \"None is selected.\";",
              "}",
              "?>"
            ],
            "options": [
              "You selected Honda.",
              "You selected Honda.You selected BMW.",
              "You selected Honda.You selected BMW.You selected Audi.",
              "You selected Honda.You selected BMW.You selected Audi.None is selected."
            ],
            "answer": "You selected Honda.You selected BMW.You selected Audi.None is selected.",
            "explanation": "In the above PHP script, break statements were not used in the case blocks. The value of $car is \"Honda\", so the first case executes and then all other blocks will be executed because the switch statement executes the blocks from the matched case block to the bottom if the break statement is not there."
          },
          {
            "question": "Which of the following is the output of the below code?",
            "code": [
              "<?php",
              "class letsfindcourse",
              "{",
              "    public $lfc_name = \"letsfindcourse\";",
              "    ",
              "    public function __construct($lfc_name)",
              "    {",
              "        $this->lfc_name = $lfc_name;",
              "    }",
              "}",
              "",
              "$lfc = new letsfindcourse(\"letsfindcourse\");",
              "echo $lfc->lfc_name;",
              "?>"
            ],
            "options": ["letsfindcourse", "1", "Error", "No Output"],
            "answer": "letsfindcourse",
            "explanation": "The output of the provided code is 'letsfindcourse'."
          },
          {
            "question": "PHP recognizes constructors by the name.",
            "options": [
              "classname()",
              "_construct()",
              "function _construct()",
              "function __construct()"
            ],
            "answer": "function __construct()",
            "explanation": "PHP recognizes constructors by the name with a double underscore followed by the 'construct' keyword."
          },
          {
            "question": "Which one of the following functions is used to determine object type?",
            "options": ["obj_type()", "type()", "is_a()", "is_obj()"],
            "answer": "is_a()",
            "explanation": "The is_a() function returns true if the object belongs to a class type or if it belongs to a class that is a child of that class. Otherwise, false is returned."
          },
          {
            "question": "Which one of the following is the right way to call a class constant, given that the class is mathFunction?",
            "options": [
              "echo mathFunction->PI;",
              "echo PI;",
              "echo mathFunction::PI;",
              "echo mathFunction=PI;"
            ],
            "answer": "echo mathFunction::PI;",
            "explanation": "echo mathFunction::PI; is the right way to call a class constant, given that the class is mathFunction."
          },
          {
            "question": "What will be the output of the following PHP code?",
            "code": [
              "$y = 2;",
              "if (--$y == 2 || $y xor --$y)",
              "{",
              "    echo $y;",
              "}"
            ],
            "options": ["1", "0", "2", "no output"],
            "answer": "0",
            "explanation": "–$y == 2 is false but y is decremented, the xor gives true if only one of the operands are true, thus 1 xor 0 is true."
          },
          {
            "question": "A function name is not case-sensitive?",
            "code": [
              "<?php",
              "function prolfc($num1, $num2, $num3)",
              "{",
              "    $mul = $num1 * $num2 * $num3;",
              "    echo \"The product is $mul\";",
              "}",
              "",
              "prolfc(1, 2, 3, 4);",
              "?>"
            ],
            "options": ["24", "8", "6", "Error: too many arguments."],
            "answer": "6",
            "explanation": "The output of the following PHP code is 6."
          },
          {
            "question": "Which one of the following PHP function is used to determine a file’s last access time?",
            "options": [
              "fileltime()",
              "filectime()",
              "fileatime()",
              "filetime()"
            ],
            "answer": "fileatime()",
            "explanation": "The fileatime() function returns a file’s last access time in Unix timestamp format or FALSE on error."
          }
        ]
      }
    }
  },
  "challenges": {
    "Python": {
      "questions": [
        {
          "question": "Select the correct output of the following String operations",
          "code": [
            "str1 = \"my isname isisis jameis isis bond\";",
            "sub = \"is\";",
            "print(str1.count(sub, 4));"
          ],
          "options": ["5", "6", "7"],
          "answer": "6",
          "explanation": "The output of the given code will be 6."
        },
        {
          "question": "Select the correct output of the following String operations",
          "code": [
            "strOne = str(\"pynative\")",
            "strTwo = \"pynative\"",
            "print(strOne == strTwo)",
            "print(strOne is strTwo)"
          ],
          "options": ["False False", "True True", "True False", "False True"],
          "answer": "True False",
          "explanation": "The output of the given code will be 'True False'."
        },
        {
          "question": "What is the output of the following round() function call",
          "code": ["print(round(100.2563, 3))", "print(round(100.000056, 3))"],
          "options": [
            "100.256\n100",
            "100.256\n100.000",
            "100.256\n100.0",
            "100.0\n100"
          ],
          "answer": "100.256\n100.000",
          "explanation": "The output of the round(100.2563, 3) call is '100.256', and the output of the round(100.000056, 3) call is '100.000'."
        },
        {
          "question": "Choose the correct function to get 3 elements from the list randomly in such a way that each element of the list has a different probability of being selected.",
          "code": ["numberList = [100, 200, 300, 400, 500]"],
          "options": [
            "random.choices(numberList, weights=(10, 5, 15, 20, 50), k=3)",
            "random.choice(numberList, weights=(10, 5, 15, 20, 50), k=3)",
            "random.sample(numberList, weights=(10, 5, 15, 20, 50), k=3)"
          ],
          "answer": "random.choices(numberList, weights=(10, 5, 15, 20, 50), k=3)",
          "explanation": "The correct function to get 3 elements from the list randomly with different probabilities is 'random.choices(numberList, weights=(10, 5, 15, 20, 50), k=3)'. This function allows you to specify the weights for each element to control their selection probability."
        },
        {
          "question": "Select all the correct options to join two lists in Python",
          "code": [
            "listOne = ['a', 'b', 'c', 'd']",
            "listTwo = ['e', 'f', 'g']"
          ],
          "options": [
            "newList = extend(listOne, listTwo)",
            "newList = listOne.extend(listTwo)",
            "newList.extend(listOne, listTwo)"
          ],
          "answer": ["newList = listOne.extend(listTwo)"],
          "explanation": "To join two lists in Python, you can use the '+' operator or the 'extend' method. The correct option is 'newList = listOne.extend(listTwo)'. The other options are incorrect."
        },
        {
          "question": "What is the output of the following union operation",
          "code": [
            "set1 = {10, 20, 30, 40}",
            "set2 = {50, 20, '10', 60}",
            "set3 = set1.union(set2)",
            "print(set3)"
          ],
          "options": [
            "{40, 10, 50, 20, 60, 30}",
            "{40, '10', 50, 20, 60, 30}",
            "{40, 10, '10', 50, 20, 60, 30}",
            "SyntaxError: Different types cannot be used with sets"
          ],
          "answer": "{40, 10, '10', 50, 20, 60, 30}",
          "explanation": "The `union` operation between `set1` and `set2` combines the elements of both sets, removing any duplicates. The result is a set containing elements {40, 10, '10', 50, 20, 60, 30}. So, the correct output is '{40, 10, '10', 50, 20, 60, 30}'."
        },
        {
          "question": "Select the all correct way to remove the key marks from a dictionary",
          "code": [
            "student = {",
            "  \"name\": \"Emma\",",
            "  \"class\": 9,",
            "  \"marks\": 75",
            "}"
          ],
          "options": [
            "student.pop(\"marks\")",
            "student.remove(\"marks\")",
            "student.popitem(\"marks\")"
          ],
          "answer": "student.pop(\"marks\")",
          "explanation": "To remove the key \"marks\" from the dictionary, you can use either the 'pop(\"marks\")' method . This methods will effectively remove the key-value pair associated with \"marks\" from the dictionary."
        }
      ]
    },
    "JavaScript": {
      "questions": [
        {
          "question": "Determine the result – String('Hello') === 'Hello';",
          "options": ["true", "false", "SyntaxError", "ReferenceError"],
          "answer": "true",
          "explanation": "The result is true because the strict equality operator (===) compares both the type and the value. In this case, the string 'Hello' created using the String constructor is still equal to the string literal 'Hello'."
        },
        {
          "question": "What is the correct JavaScript syntax to print 'DataFlair' in the console?",
          "options": [
            "print('DataFlair')",
            "console.print('DataFlair')",
            "log.console('DataFlair')",
            "console.log('DataFlair')"
          ],
          "answer": "console.log('DataFlair')",
          "explanation": "The correct JavaScript syntax to print 'DataFlair' in the console is 'console.log('DataFlair')'."
        },
        {
          "question": "Which is the correct JavaScript syntax to change the HTML content given below?\n\n<p id='test'>Hello World!</p>",
          "options": [
            "document.getElementById('test').innerHTML = 'Hello DataFlair!'",
            "document.getElementsById('test').innerHTML = 'Hello DataFlair!'",
            "document.getElementById(test).innerHTML = 'Hello DataFlair!'",
            "document.getElementsByTagName('p')[0].innerHTML = 'Hello DataFlair!'"
          ],
          "answer": "document.getElementById('test').innerHTML = 'Hello DataFlair!'",
          "explanation": "The correct JavaScript syntax to change the HTML content of an element with the ID 'test' is 'document.getElementById('test').innerHTML = 'Hello DataFlair!'.'"
        },
        {
          "question": "How do you find the minimum of x and y using JavaScript?",
          "options": ["min(x,y);", "Math.min(x,y)", "Math.min(xy)", "min(xy);"],
          "answer": "Math.min(x,y)",
          "explanation": "To find the minimum of two values in JavaScript, you should use the 'Math.min(x, y)' function."
        },
        {
          "question": "What will be the output of the following JavaScript code snippet?",
          "code": [
            "<p id=\"demo\"></p>",
            "var txt1 = \"Sanfoundry_\";",
            "var txt2 = \"Javascriptmcq\";",
            "document.getElementById(\"demo\").innerHTML = txt1 + txt2;"
          ],
          "options": [
            "error",
            "Sanfoundry_ Javascriptmcq",
            "undefined",
            "Sanfoundry_Javascriptmcq"
          ],
          "answer": "Sanfoundry_Javascriptmcq",
          "explanation": "The + operator in JavaScript acts as a concatenation operator when used with strings. The new string does not have any space between the two added strings."
        },
        {
          "question": "What will be the output of the following JavaScript code snippet?",
          "code": [
            "// JavaScript Equalto Operators",
            "function equalto()",
            "{",
            "    var num = 10;",
            "    if (num === \"10\")",
            "        return true;",
            "    else",
            "        return false;",
            "}"
          ],
          "options": ["false", "true", "compilation error", "runtime error"],
          "answer": "false",
          "explanation": "A === operator in JS is only true if the operands are of the same type and the contents match. Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions."
        },
        {
          "code": [
            "// Javascript code snippet to compare the height",
            "function height()",
            "{",
            "    var height = 123.56;",
            "    var type = (height >= 190) ? \"tall\" : \"short\";",
            "    return type;",
            "}"
          ],
          "question": "What will be the output of the following JavaScript code?",
          "options": ["short", "123.56", "tall", "190"],
          "answer": "short",
          "explanation": "The ternary operator in JavaScript is used as a comparison operator which works on three operands. The statement in the above code initializes the 'type' variable with the value 'short' which is returned through the function."
        }
      ]
    },
    "Java": {
      "questions": [
        {
          "question": "What will be the output of the following code?",
          "code": [
            "import java.util.Arrays;",
            "import java.util.Comparator;",
            "public class ComparatorTest {",
            "    public static void main(String args[]) {",
            "        String[] ar = { \"c\", \"d\", \"b\", \"a\", \"e\" };",
            "        InnerClass in = new InnerClass();",
            "        Arrays.parallelSort(ar, in);",
            "        for (String str : ar)",
            "            System.out.println(str + \" \");",
            "        System.out.println(Arrays.binarySearch(ar, \"b\"));",
            "    }",
            "    static class InnerClass implements Comparator<String> {",
            "        public int compare(String s1, String s2) {",
            "            return s2.compareTo(s1);",
            "        }",
            "    }",
            "}"
          ],
          "options": [
            "e d c b a -1",
            "a b c 0 e d",
            "d b c e a 1",
            "e b a d c"
          ],
          "answer": "e d c b a -1",
          "explanation": "The code sorts the array of strings in reverse order and then searches for the index of the string \"b\" using binary search. The output is \"e d c b a\" (the sorted array) followed by \"-1\" (the result of binary search for \"b\")."
        },
        {
          "question": "What will be the output of the following code?",
          "code": [
            "import java.util.LinkedHashSet;",
            "import java.util.Set;",
            "public class LinkedHashSetTest {",
            "    public static void main(String args[]) {",
            "        Set s = new LinkedHashSet();",
            "        s.add(\"1\");",
            "        s.add(1);",
            "        s.add(3);",
            "        s.add(2);",
            "        System.out.println(s);",
            "    }",
            "}"
          ],
          "options": [
            "[1, 1, 2, 3]",
            "[1, 2, 2, 3]",
            "[1, 1, 3, 2]",
            "[1, 2, 3]"
          ],
          "answer": "[1, 1, 3, 2]",
          "explanation": "The code creates a LinkedHashSet and adds elements \"1\", 1, 3, and 2 to it. LinkedHashSet maintains the order of elements as they were added. Therefore, the output will be [1, 1, 3, 2], which reflects the order of insertion."
        },
        {
          "question": "What will be the output of the following code?",
          "code": [
            "import java.util.ArrayList;",
            "import java.util.Collections;",
            "import java.util.Comparator;",
            "class Employee implements Comparator {",
            "    String name;",
            "    String id;",
            "    public Employee() {}",
            "    public Employee(String name, String id) {",
            "        this.name = name;",
            "        this id = id;",
            "    }",
            "    @Override",
            "    public int compare(Employee obj1, Employee obj2) {",
            "        return obj2.name.compareTo(obj1.name);",
            "    }",
            "    @Override",
            "    public String toString() {",
            "        return \"{\" + \"name \" + name + \", id \" + id + '}';",
            "    }",
            "}",
            "public class ComparatorUsage {",
            "    public static void main(String args[]) {",
            "        Employee emp1 = new Employee(\"sam\", \"4\");",
            "        Employee emp2 = new Employee(\"amy\", \"2\");",
            "        ArrayList<Employee> list = new ArrayList<Employee>();",
            "        list.add(emp1);",
            "        list.add(emp2);",
            "        Collections.sort(list, new Employee());",
            "        System.out.println(list);",
            "    }",
            "}"
          ],
          "options": [
            "[2, 3]",
            "Runtime Exception",
            "Compile time exception",
            "None of the above"
          ],
          "answer": "Compile time exception",
          "explanation": "The code will not compile because the 'Employee' class is implementing the raw 'Comparator' interface, but it should implement 'Comparator<Employee>'. Additionally, there is a typo in the 'Employee' constructor where 'this id' should be 'this.id'."
        },
        {
          "question": "What will be the output of the following code?",
          "code": [
            "import java.util.ArrayList;",
            "import java.util.List;",
            "",
            "public class ListDemo {",
            "    public static void main(String args[]) {",
            "        List<Integer> list = new ArrayList<Integer>();",
            "        list.add(2);",
            "        list.add(3);",
            "        m(list);",
            "    }",
            "",
            "    public static void m(List<Number> list) {",
            "        System.out.println(list);",
            "    }",
            "}"
          ],
          "options": [
            "3",
            "3.0",
            "Compile time exception",
            "Runtime exception"
          ],
          "answer": "Runtime exception",
          "Explanation": "In Java, generics are invariant. This means that if you have a method that accepts a List<Number>, it cannot accept a List<Integer> even though Integer is a subclass of Number. When you attempt to call the m method with a List<Integer>, it will result in a runtime exception because the types are not compatible. This behavior occurs because Java enforces type safety at runtime for generic types."
        },
        {
          "question": "Which of those doesn’t have an index-based structure?",
          "options": ["List", "Set", "Map"],
          "answer": "Set",
          "explanation": "A Set is a collection of distinct elements, and it doesn't have a direct index-based structure like Lists or Maps."
        },
        {
          "question": "java.util.Collections is a:",
          "options": ["Class", "Interface", "Object", "None of the above"],
          "answer": "Class",
          "explanation": "java.util.Collections is a class in the Java Collections Framework. It provides various utility methods for working with collections."
        },
        {
          "question": "What will be the output of the following code?",
          "code": [
            "import java.util.ArrayList;",
            "import java.util.List;",
            "",
            "public class MyClass {",
            "  public static void main(String args[]) {",
            "    // Insert Here",
            "    List<String> list = new ArrayList<String>();",
            "    list.add(\"a\");",
            "    list.add(\"b\");",
            "    l.add(list);",
            "  }",
            "}"
          ],
          "options": [
            "List l = new ArrayList>();",
            "List<String> l = new ArrayList<>();",
            "List<?> l = new ArrayList<>();",
            "List l = new ArrayList();"
          ],
          "answer": "List l = new ArrayList();",
          "explanation": "The correct statement to insert is: List l = new ArrayList();"
        }
      ]
    },
    "C++": {
      "questions": [
        {
          "question": "What will be the output of the following C++ code?",
          "code": [
            "#include <iostream>",
            "using namespace std;",
            "struct Time {",
            "    int hours, minutes, seconds;",
            "};",
            "int toSeconds(Time now);",
            "int main() {",
            "    Time t;",
            "    t.hours = 5;",
            "    t.minutes = 30;",
            "    t.seconds = 45;",
            "    cout << \"Total seconds: \" << toSeconds(t) << endl;",
            "    return 0;",
            "}",
            "int toSeconds(Time now) {",
            "    return 3600 * now.hours + 60 * now.minutes + now.seconds;",
            "}"
          ],
          "options": ["19845", "20000", "15000", "19844"],
          "answer": "19845",
          "explanation": "In this program, we are just converting the given hours and minutes into seconds."
        },
        {
          "question": "What will be the output of the following C++ code?",
          "code": [
            "#include <iostream>",
            "using namespace std;",
            "int main() {",
            "    struct ShoeType {",
            "        string style;",
            "        double price;",
            "    };",
            "    ShoeType shoe1, shoe2;",
            "    shoe1.style = \"Adidas\";",
            "    shoe1.price = 9.99;",
            "    cout << shoe1.style << \"$\" << shoe1.price;",
            "    shoe2 = shoe1;",
            "    shoe2.price = shoe2.price / 9;",
            "    cout << shoe2.style << \"$\" << shoe2.price;",
            "    return 0;",
            "}"
          ],
          "options": [
            "Adidas $ 9.99Adidas $ 1.11",
            "Adidas $ 9.99Adidas $ 9.11",
            "Adidas $ 9.99Adidas $ 11.11",
            "Adidas $ 11.11Adidas $ 11.11"
          ],
          "answer": "Adidas $ 9.99Adidas $ 1.11",
          "explanation": "We copied the value of shoe1 into shoe2 and divided the shoe2 price by 9, so this is the output."
        },
        {
          "question": "What will be the output of the following C++ code?",
          "code": [
            "#include <iostream>",
            "using namespace std;",
            "struct sec {",
            "    int a;",
            "    char b;",
            "};",
            "int toSeconds(Time now);",
            "int main() {",
            "    struct sec s = {25, 50};",
            "    struct sec *ps = (struct sec *) &s;",
            "    cout << ps->a << ps->b;",
            "    return 0;",
            "}"
          ],
          "options": ["252", "253", "254", "262"],
          "answer": "252",
          "explanation": "In this program, we are dividing the values of a and b and printing it."
        },
        {
          "question": "What will be the output of the following C++ code?",
          "code": [
            "#include <iostream>",
            "using namespace std;",
            "int main() {",
            "    int a[2][4] = {3, 6, 9, 12, 15, 18, 21, 24};",
            "    cout << *(a[1] + 2) << *(*(a + 1) + 2) << [1[a]];",
            "    return 0;",
            "}"
          ],
          "options": ["15 18 21", "21 21 21", "24 24 24", "Compile time error"],
          "answer": "21 21 21",
          "explanation": "a[1][2] means 1 * (4) + 2 = 6th element of an array starting from zero."
        },
        {
          "question": "What will be the output of the following C++ code?",
          "code": [
            "#include <iostream>",
            "using namespace std;",
            "int main() {",
            "    int i;",
            "    const char *arr[] = {\"c\", \"c++\", \"java\", \"VBA\"};",
            "    const char *(*ptr)[4] = &arr;",
            "    cout << ++(*ptr)[2];",
            "    return 0;",
            "}"
          ],
          "options": ["ava", "java", "c++", "compile time error"],
          "answer": "ava",
          "explanation": "In this program, we are moving the pointer from the first position to the second position and printing the remaining value."
        },
        {
          "question": "What will be the output of the following C++ code?",
          "code": [
            "#include <iostream>",
            "using namespace std;",
            "int main() {",
            "    int arr[] = {4, 5, 6, 7};",
            "    int *p = (arr + 1);",
            "    cout << *p;",
            "    return 0;",
            "}"
          ],
          "options": ["4", "5", "6", "7"],
          "answer": "5",
          "explanation": "In this program, we are making the pointer point to the next value and printing it."
        },
        {
          "question": "What will happen in the following C++ code snippet?",
          "code": [
            "#include <iostream>",
            "using namespace std;",
            "int main() {",
            "    int arr[] = {4, 5, 6, 7};",
            "    int *p = (arr + 1);",
            "    cout << arr;",
            "    return 0;",
            "}"
          ],
          "options": ["4", "5", "address of arr", "7"],
          "answer": "address of arr",
          "explanation": "As we attempted to print only 'arr,' it will print the address of the array."
        },
        {
          "question": "What will be the output of the following C++ code?",
          "code": [
            "#include <iostream>",
            "using namespace std;",
            "int main() {",
            "    int numbers[5];",
            "    int *p;",
            "    p = numbers; *p = 10;",
            "    p++; *p = 20;",
            "    p = numbers[2]; *p = 30;",
            "    p = numbers + 3; *p = 40;",
            "    p = numbers; *(p + 4) = 50;",
            "    for (int n = 0; n < 5; n++) {",
            "        cout << numbers[n] << \",\";",
            "    }",
            "    return 0;",
            "}"
          ],
          "options": [
            "10,20,30,40,50,",
            "1020304050",
            "compile error",
            "runtime error"
          ],
          "answer": "10,20,30,40,50,",
          "explanation": "In this program, we are assigning values to the array and immediately dereferencing it for printing."
        },
        {
          "question": "What will be the output of the following C++ code?",
          "code": [
            "#include <iostream>",
            "using namespace std;",
            "int main() {",
            "    int arr[] = {4, 5, 6, 7};",
            "    int *p = (arr + 1);",
            "    cout << *arr + 9;",
            "    return 0;",
            "}"
          ],
          "options": ["12", "5", "13", "error"],
          "answer": "13",
          "explanation": "In this program, we are adding the value 9 to the initial value of the array, so it prints 13."
        },
        {
          "question": "The void pointer can point to which type of objects?",
          "options": ["int", "float", "double", "all of the mentioned"],
          "answer": "all of the mentioned",
          "explanation": "Because it doesn’t know the type of object it is pointing to, a void pointer can point to all objects."
        },
        {
          "question": "What will be the output of the following C++ code?",
          "code": [
            "#include <iostream>",
            "using namespace std;",
            "int main() {",
            "    char str[5] = \"ABC\";",
            "    cout << str[3];",
            "    cout << str;",
            "    return 0;",
            "}"
          ],
          "options": ["ABC", "ABCD", "AB", "AC"],
          "answer": "ABC",
          "explanation": "We are just printing the values of the first 3 characters of the array 'str'."
        },
        {
          "question": "What will be the output of the following C++ code?",
          "code": [
            "#include <iostream>",
            "using namespace std;",
            "int main() {",
            "    char array[] = {10, 20, 30};",
            "    cout << -2 [array];",
            "    return 0;",
            "}"
          ],
          "options": ["-15", "-30", "compile time error", "garbage value"],
          "answer": "-30",
          "explanation": "It's printing the negative value of the element at index -2 in the array 'array'."
        }
      ]
    },
    "PHP": {
      "questions": [
        {
          "question": "What will be the output of the following PHP code?",
          "code": [
            "<?php",
            "$i = 0;",
            "$j = 0;",
            "first: while ($i < 2)",
            "{",
            " $i++;",
            "  while ($j < 3)",
            "    {",
            "     $j++;",
            "      echo(\"loop\\n\");",
            "      if($j%2==0)",
            "         continue;",
            "      goto first;",
            "    }",
            "}",
            "?>"
          ],
          "options": [
            "prints 'loop' infinite times",
            "prints 'loop' 1 time",
            "prints 'loop' 2 times",
            "prints 'loop' 3 times"
          ],
          "answer": "prints 'loop' 3 times",
          "explanation": "\"loop\" 3 times is the output of the following code snippet."
        },
        {
          "question": "What will be the output of the following code?",
          "code": [
            "<?php declare(strict_types=1); // strict requirement ?>",
            "",
            "<?php",
            "function setHeight(int $minheight = 50) {",
            "    echo \"The height is : $minheight <br>\";",
            "}",
            "",
            "setHeight(350);",
            "?>"
          ],
          "options": [
            "The height is : 350",
            "The height is : 50",
            "No Output",
            "Error"
          ],
          "answer": "The height is : 350",
          "explanation": "The output of the following code will be 'The height is : 350'."
        },
        {
          "question": "Which of the following functions help in navigating to another PHP page?",
          "options": [
            "header()",
            "location()",
            "redirect()",
            "None of the above"
          ],
          "answer": "header()",
          "explanation": "The header() function is used to send HTTP headers, including the Location header, which can be used to navigate to another PHP page or URL."
        },
        {
          "question": "Which of the following is the output of the below code?",
          "code": [
            "<?php",
            "   class lfc {",
            " ",
            "      var $mcq_type;",
            "     ",
            "      function setmcq_type($par){",
            "         $this->mcq_type = $par;",
            "      }",
            "        ",
            "      function getmcq_type(){",
            "         echo $this->mcq_type.\"<br>\";",
            "      }",
            "        ",
            "   }",
            "  ",
            "   $obj = new lfc;",
            " ",
            "   $obj->setmcq_type(\"Objects Mcq\");",
            "   $obj->getmcq_type();",
            "?>"
          ],
          "options": ["Objects Mcq", "Objects Mcq \"\"", "Error", "No Output"],
          "answer": "Objects Mcq \"\"",
          "explanation": "The output of the provided code is 'Objects Mcq<br>'."
        },
        {
          "question": "Which of the following is the output of the below code?",
          "code": [
            "<?php",
            "class letsfindcourse",
            "{",
            "    public function __destruct(){",
            "        echo 'The class \"' . __CLASS__ . '\" was destroyed!';",
            "    }",
            "}",
            "",
            "$lfc = new letsfindcourse;",
            "?>"
          ],
          "options": [
            "The class letsfindcourse was destroyed!",
            "The class lfc was initiated!",
            "Error",
            "No Output"
          ],
          "answer": "The class letsfindcourse was destroyed!",
          "explanation": "The output of the provided code is 'The class \"letsfindcourse\" was destroyed!'."
        },
        {
          "question": "Which is the correct example of an Associative array in PHP?",
          "options": [
            "$person = array(\"Alvin\"=>\"Delhi\", \"Alex\"=>\"Mumbai\", \"Bhavik\"=>\"Banglore\");",
            "$person = array(\"Alvin\"=>\"Delhi\"; \"Alex\"=>\"Mumbai\"; \"Bhavik\"=>\"Banglore\");",
            "$person = new array(\"Alvin\"=>\"Delhi\", \"Alex\"=>\"Mumbai\", \"Bhavik\"=>\"Banglore\");",
            "$person = new array(\"Alvin\"=>\"Delhi\"; \"Alex\"=>\"Mumbai\"; \"Bhavik\"=>\"Banglore\");"
          ],
          "answer": "$person = array(\"Alvin\"=>\"Delhi\", \"Alex\"=>\"Mumbai\", \"Bhavik\"=>\"Banglore\");",
          "explanation": "The correct example of an Associative array in PHP is: $person = array(\"Alvin\"=>\"Delhi\", \"Alex\"=>\"Mumbai\", \"Bhavik\"=>\"Banglore\");"
        },
        {
          "question": "What is the use of PHP mt_rand() function?",
          "options": [
            "Generates a random number using the milliseconds time.",
            "Generates a random number using the microseconds time.",
            "Generates a random number using the milliseconds time.",
            "Generates a random number using the Mersenne Twister algorithm."
          ],
          "answer": "Generates a random number using the Mersenne Twister algorithm.",
          "explanation": "The use of the mt_rand() function in PHP is to generate a random number using the Mersenne Twister algorithm."
        },
        {
          "question": "Which PHP global variable is used to collect form data after submitting an HTML form with method='post'?",
          "options": ["$_GET", "$_REQUEST", "$_POST", "$_ENV"],
          "answer": "$_POST",
          "explanation": "The PHP global variable $_POST is used to collect form data after submitting an HTML form with method='post'."
        }
      ]
    }
  }
}
